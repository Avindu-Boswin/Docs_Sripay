{
    "docs": "DOCS",
    "doc": "Documentation",
    "developerheading": "SriPay Mobile App Guide",
    "viewguide": "View App Guide",
    "sections": "Sections",
    "documentationIntro": "SriPay Documentation is your end-to-end guide to integrate secure, reliable payments. Explore REST APIs, authentication flows, webhooks, and best practices to ship faster with confidence.",
    "thirdsectiontitle": "Build With SriPay",
    "developersectiondiscription": "Introducing SriPay mobile applications designed for both merchants and users. Merchants will have an all-in-one platform to manage transactions, track settlements, and monitor business performance on the go. At the same time, users will experience a secure, intuitive, and seamless way to make payments, review their history, and stay fully connected within the SriPay ecosystem.",
    "subtitle": "Explore docs for our products, services, and more. Select your role and a product to get started.",
    "footer": {
        "learnMore": "Learn more about",
        "visitSripay": "Visit SriPay",
        "needHelp": "Need More Help?",
        "contactUs": "Contact Us",
        "copyright": "Â© 2025 Sripay. All rights reserved. Unauthorized use, reproduction, or distribution of any content without prior written consent is strictly prohibited."
    },
    "roles": {
        "acquirer": {
            "title": "Acquirer",
            "desc": "Access guides and resources for acquirers."
        },
        "merchant": {
            "title": "Merchant",
            "desc": "Find merchant onboarding and integration help."
        },
        "developer": {
            "title": "Developer",
            "desc": "View developer guide"
        },
        "bradingguidline": {
            "title": "Branding Guidelines",
            "desc": "Guidelines ensuring consistent brand voice"
        },
        "marketingmaterials": {
            "title": "Marketing Materials",
            "desc": "Assets showcasing our brand story"
        },
        "agreement": {
            "title": "View Agreement",
            "desc": "View acquirer and merchant agreements"
        }
    },
    "acquirerIntro": {
        "title": "Who Can Be an",
        "titleSpan": "Acquirer?",
        "intro": "Becoming an Acquirer is a significant step for merchants who wish to expand their payment processing capabilities and offer seamless transactions to their customers. An Acquirer is typically a merchant or organization that is responsible for processing card payments and managing merchant accounts.",
        "requirementsTitle": "Requirements to Become an Acquirer",
        "requirement1": "Merchant must have been operating for a minimum of 6 months.",
        "requirement2": "Merchant should have processed at least 100 transactions during this period.",
        "requirement3": "Maintain a good transaction record with minimal chargebacks or disputes.",
        "requirement4": "Provide valid business registration and compliance documents.",
        "requirement5": "Demonstrate the ability to manage payment settlements and reconciliation.",
        "whyTitle": "Why Become an Acquirer?",
        "whyText": "Becoming an Acquirer allows merchants to take control of their payment processing, improve transaction efficiency, and offer a better experience to their customers. It opens up new business opportunities and helps build trust with partners and clients.",
        "benefitsTitle": "Benefits & Features",
        "benefit1": "Direct access to payment networks and faster settlements.",
        "benefit2": "Enhanced security and fraud prevention tools.",
        "benefit3": "Ability to onboard and manage multiple merchants.",
        "benefit4": "Customizable payment solutions for different business needs.",
        "benefit5": "Detailed reporting and analytics for transaction monitoring.",
        "benefit6": "Priority support and dedicated account management.",
        "requirements": "Requirements"
    },
    "acquirerRegWorkflow": {
        "title": "Merchant Registration",
        "subtitle": "Registration Workflow",
        "desc": "The Sub-Acquirer Portal provides a structured, fully digital KYC and onboarding experience for merchants.",
        "steps": [
            {
                "title": "Step 1: Merchant Basic Details",
                "fieldsTitle": "Fields",
                "fields": [
                    "Merchant ID: Automatically generated by the system. Alternatively, you may enter your own Merchant ID if preferred.",
                    "First Name / Last Name: Legal name of the merchant or business representative.",
                    "Mobile Number: With country code selector (e.g., +94 for Sri Lanka).",
                    "Email: Used for system notifications and login credentials.",
                    "Password: Temporary password to be used for initial login."
                ],
                "notesTitle": "Notes",
                "notes": [
                    "Merchant email is auto-validated and disabled once submitted.",
                    "Merchant ID is unique and essential for traceability within SriPay, Alipay+, and reporting systems."
                ]
            },
            {
                "title": "Step 2: Merchant Welcome Email Confirmation",
                "desc": "Once submitted, the merchant will receive an email with:",
                "fields": [
                    "Merchant ID",
                    "Email address",
                    "Temporary password"
                ]
            },
            {
                "title": "Step 3: Merchant Overview Dashboard",
                "featuresTitle": "Features",
                "features": [
                    "Merchant List View with columns",
                    "Use the three-dot menu (...) to Complete KYC"
                ],
                "columns": [
                    "Business Name",
                    "Merchant ID",
                    "Email",
                    "Sub-Acquirer ID",
                    "Created Date",
                    "Status (Draft)",
                    "Action (Complete KYC)"
                ]
            },
            {
                "title": "Step 4: Registration Details",
                "fieldsTitle": "Fields",
                "fields": [
                    "Type of Business: Sole Proprietor, Private/Public Limited, Partnership",
                    "Business Logo Upload",
                    "Business Name",
                    "Company Registration Number",
                    "Registered Country",
                    "VAT Registration Number (optional)"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Captures basic company metadata and legal identifiers to uniquely register the merchant."
            },
            {
                "title": "Step 5: Address Details",
                "fieldsTitle": "Fields",
                "fields": [
                    "Company Email",
                    "Office Address",
                    "Website URL",
                    "Facebook Page URL (optional)"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Collects digital and physical location identifiers for both compliance and communication purposes."
            },
            {
                "title": "Step 6: Business Contact Person",
                "fieldsTitle": "Fields",
                "fields": [
                    "Full Name",
                    "Telephone and Mobile Numbers",
                    "Designation (optional)",
                    "Fax Number (optional)",
                    "Contact Email",
                    "Business Contact Address"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Identifies the main authorized contact person from the merchant side."
            },
            {
                "title": "Step 7: Business Activities",
                "fieldsTitle": "Fields",
                "fields": [
                    "Products/Services (multi-select)",
                    "Date of Commencement",
                    "Principle Business"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Defines the nature of business and supported industries (e.g., Fintech, Healthcare)."
            },
            {
                "title": "Step 8: Company Settlement Bank Details",
                "fieldsTitle": "Fields",
                "primaryBank": [
                    "Bank Name",
                    "Branch Name",
                    "Branch Code",
                    "Account Number",
                    "Account Holder Name",
                    "Settlement Currency (LKR or USD)"
                ],
                "secondaryBank": [
                    "Allows setting up a backup account for disbursements."
                ],
                "purposeTitle": "Purpose",
                "purpose": "Captures financial settlement details. The primary bank will be used for immediate settlement unless otherwise changed via request."
            },
            {
                "title": "Step 9: Owner Details",
                "fieldsTitle": "Fields",
                "fields": [
                    "Title, Full Name",
                    "Mobile and Email",
                    "Fax, NIC, Passport (optional)"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Records legal ownership for identity verification and compliance."
            },
            {
                "title": "Step 10: Constitutional Documents Upload",
                "fieldsTitle": "Documents Required",
                "fields": [
                    "NIC/Passport (Front and Back)",
                    "Proof of Billing (Water/Electricity/Govt. Letter)",
                    "Business Registration Certificate",
                    "Form 1 of Company",
                    "Shop Images (exterior and interior)"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Ensures KYC/AML compliance with document-level validation of identity and ownership."
            },
            {
                "title": "Step 11: Review & Submit KYC Summary",
                "fieldsTitle": "View",
                "fields": [
                    "Auto-generated summary of all completed fields",
                    "Sub-Acquirer admin reviews and confirms final submission"
                ],
                "purposeTitle": "Purpose",
                "purpose": "Final validation before KYC approval and activation of merchant account."
            },
            {
                "title": "Step 12: Sub-Acquirer Evaluation",
                "fieldsTitle": "View Summary",
                "fields": [
                    "The dashboard summary provides a real-time count of merchants and stores awaiting approval at each stage.",
                    "Each merchant appears under Pending Requests with a status like:"
                ],
                "statuses": [
                    "Sub-Acquirer In Progress",
                    "Awaiting SriPay In Progress",
                    "Awaiting Alipay In Progress",
                    "Rejected"
                ],
                "kycDetailTitle": "KYC Detail Model",
                "kycDetailDesc": "View the complete KYC information of a selected pending request by clicking the three-dot menu on the right.",
                "modelIncludesTitle": "Model Includes",
                "modelIncludes": [
                    "Merchant ID",
                    "Type of Business",
                    "Registration Number",
                    "Email & Address",
                    "Contact Person Info",
                    "Commencement Date",
                    "Industry",
                    "Uploaded Documents"
                ]
            },
            {
                "title": "Step 13: Sub-Acquirer Review and Decision",
                "actionOptionsTitle": "Action Options",
                "actionOptions": [
                    "Send for SriPay Approval: Initiates secondary-level verification by SriPay admin team. Confirmation model ensures reviewer intent is clear.",
                    "Reject: Opens a rejection model requiring a comment. Ensures transparent decision with reasons such as Invalid address, Mismatched document names, Incomplete contact information."
                ],
                "systemNotificationsTitle": "System Notifications",
                "systemNotifications": [
                    "Merchant is notified of Sub-Acquirerâs decision",
                    "Merchant remains in âSub-Acquirer In Progressâ until final decision"
                ]
            },
            {
                "title": "Step 14: SriPay Evaluation",
                "desc": "If the Sub-Acquirer sends the application forward, it moves to the SriPay Admin Panel for a second-level review.",
                "adminCanTitle": "SriPay Admin can",
                "adminCan": [
                    "Approve and forward to Alipay",
                    "Reject with comments and notify Sub-Acquirer"
                ],
                "systemNotificationsTitle": "System Notifications",
                "systemNotifications": [
                    "Sub-Acquirer is notified of SriPayâs decision",
                    "Merchant remains in âSriPay In Progressâ until final decision"
                ]
            },
            {
                "title": "Step 15: Alipay Evaluation",
                "desc": "If SriPay approves the application, it is submitted to Alipay+ Team.",
                "adminCanTitle": "Alipay+ Admin can",
                "adminCan": [
                    "Approve: Merchant is now live for payment acceptance",
                    "Reject: Sent back with reason; Sub-Acquirer and SriPay are notified"
                ]
            },
            {
                "title": "Step 16: Merchant Activation",
                "desc": "Once approved by Alipay, the merchant is",
                "fields": [
                    "Listed as Active",
                    "Can receive payments via Alipay+ network",
                    "Appears under âApproved Merchantsâ in the Sub-Acquirer Dashboard"
                ],
                "nextStepsTitle": "Next Steps for Merchant",
                "nextSteps": [
                    "Access Merchant Portal",
                    "Download or generate payment QR",
                    "View transactions, revenue reports"
                ]
            },
            {
                "title": "Step 17: Troubleshooting"
            }
        ]
    },
    "acquirerGettingStart": {
        "title": "Getting Started",
        "intro": "To become a Sub-Acquirer in the ",
        "intro2": " system, please follow these two main steps:",
        "step1Title": "Step 1 : Send a Request Email",
        "step1EmailSubject": "Request to Create Sub-Acquirer Account",
        "step1EmailDesc": "Email us at with the subject:",
        "step1Include": "In the email, please include:",
        "step1List": [
            "Your Company Name",
            "Contact person name and phone number",
            "A brief statement requesting access to create a Sub-Acquirer account on SriPay"
        ],
        "step2Title": "Step 2: Provide Required Information",
        "step2Desc": "Once we acknowledge your request, youâll be asked to submit the following details:",
        "companyDetailsTitle": "1. Company Details",
        "companyDetailsList": [
            "Company Name",
            "Company Type",
            "Registration Number (optional)",
            "VAT Number (optional)",
            "Country",
            "SMS Mask (optional)",
            "Settlement Type (default: Acquirer Manual)",
            "Primary and Secondary Colors for theming",
            "Mandatory Documents:"
        ],
        "mandatoryDocuments": [
            "Business License",
            "Agreement",
            "Company Logo (Light & Dark versions)"
        ],
        "contactDetailsTitle": "2. Contact Details",
        "contactDetailsList": [
            "Email Address",
            "Primary Phone",
            "Secondary Phone (optional)",
            "Website URL",
            "Full Business Address"
        ],
        "financialDetailsTitle": "3. Financial Details",
        "financialDetailsDesc": "You must provide both USD and LKR bank details. For each account, provide:",
        "financialDetailsList": [
            "Bank Name",
            "Bank Code",
            "SWIFT/BIC Code",
            "Account Number",
            "Account Holder Name",
            "Branch Name",
            "Branch Code",
            "Street, City, and Postal Code"
        ],
        "financialNote": "Note: All banking data is encrypted and must match company registration documents.",
        "loginCredentialsTitle": "4. Login Credentials",
        "loginCredentialsDesc": "When Logging in, please provide:",
        "loginCredentialsList": [
            "Master email address (for login)",
            "A temporary password will be issued at account creation, which you may reset upon first login."
        ]
    },
    "regBulk": {
        "title": "Merchant Bulk Registration",
        "subtitle": "Registration Workflow",
        "desc": "This feature allows Sub-Acquirers to onboard multiple merchants simultaneously using a predefined Excel template.",
        "steps": [
            {
                "title": "Step 1: Navigate to Bulk Registration area",
                "imgAlt": "Navigate to Bulk Registration area",
                "points": [
                    "Click the âMultiple Merchantsâ button located next to âCreate Merchantâ.",
                    "A modal titled âCreate new merchantsâ will open."
                ]
            },
            {
                "title": "Step 2: Understand the Upload Model",
                "imgAlt": "Understand the Upload Model",
                "desc": "The model includes",
                "points": [
                    "Excel File Upload Area â drag/drop or browse to upload.",
                    "Download Sample Excel â click this to get the correct format.",
                    "Important Note â file must be .xlsx, and all images/documents must be preuploaded."
                ]
            },
            {
                "title": "Step 3: Download & Fill the Sample Excel",
                "points": [
                    "Click âDownload Sample Excelâ to get the correct format.",
                    "Important Rules to follow when filling the excel file:"
                ],
                "rules": [
                    "Do not rename headers.",
                    "Do not remove any column.",
                    "Every row must contain valid entries for all columns.",
                    "Email must be unique and properly formatted.",
                    "Mobile number must follow a valid format (+94).",
                    "Ensure that all uploaded document URLs are publicly accessible to anyone with the link.",
                    "Since the merchant evaluation process involves multiple layers (Sub-Acquirer, SriPay, and Alipay), granting access restricted to a specific party would not be practical. Therefore, all uploaded document URLs should be publicly accessible to ensure seamless review across all approval stages."
                ]
            },
            {
                "title": "Step 4: Upload and Validate the Excel File",
                "points": [
                    "Click the upload box or drag your completed .xlsx file into it."
                ],
                "validationTable": {
                    "headers": [
                        "Validation Type",
                        "What It Checks",
                        "Error Example on UI"
                    ],
                    "rows": [
                        [
                            "File Format",
                            "Only .xlsx accepted",
                            "Invalid file type"
                        ],
                        [
                            "Column Headers",
                            "Exact match with template",
                            "Column headers in sheet âMerchantâ were modified..."
                        ],
                        [
                            "Required Fields",
                            "No blank First Name, Email, etc.",
                            "Row 2: missing value for First Name"
                        ],
                        [
                            "Structure",
                            "Sheet name must be 'Merchant'",
                            "Excel file does not match the Sripay template"
                        ]
                    ]
                },
                "fail": "If validation fails",
                "failPoints": [
                    "A red error modal will appear showing the exact issue.",
                    "Click âOKâ, fix the Excel file, and re-upload."
                ],
                "imgAlt": "Validation UI"
            },
            {
                "title": "Step 5: Upload Progress",
                "imgAlt": "Upload Progress",
                "success": "If the file passes validation",
                "points": [
                    "You will see the message: âUploading merchantsâ¦â",
                    "Wait until the process completes and the modal closes."
                ]
            },
            {
                "title": "Step 6: View New Merchants in Table",
                "imgAlt": "View New Merchants in Table",
                "desc": "Newly uploaded merchants appear in the main table with",
                "points": [
                    "Status: acquirer-in-progress",
                    "Unique Merchant IDs",
                    "Email addresses and other details as per Excel"
                ]
            },
            {
                "title": "Step 7: Proceed with Standard Evaluation Process",
                "desc": "Each newly added merchant will",
                "points": [
                    "Appear in the merchant list.",
                    "Require: KYC Information, Document Uploads, Review & Submit",
                    "Flow through the stages - Acquirer In Progress â Sripay In Progress â Alipay-In Progress"
                ]
            },
            {
                "title": "Troubleshooting"
            }
        ]
    },
    "storeViewAll": {
        "title": "Merchant Store Management",
        "intro": "The Merchant Store Management section allows Sub-Acquirers to manage the outlets (stores) under a registered merchant. Each merchant can have multiple stores, each with its own users and terminals. This section outlines how to view, create, and manage stores and their associated components.",
        "viewAllTitle": "Viewing All Stores",
        "viewAllIntro": "To access the list of all registered stores",
        "viewAllSteps": [
            "Navigate to the \"Stores\" section from the left sidebar.",
            "Youâll see a table listing all existing stores including"
        ],
        "tableColumns": [
            "Store ID",
            "Store Name",
            "Merchant Info",
            "Acquirer Info",
            "Contact Email & Phone",
            "Status",
            "Available Actions"
        ],
        "filterText": "Use filters to search by Merchant ID or Outlet ID.",
        "actionMenu": "From the Action menu, you can",
        "actions": [
            "View complete store details",
            "Reject stores to move it to pending approval"
        ]
    },
    "regSelf": {
        "title": "Merchant Self Sign-Up",
        "intro": "The Merchant Self Sign-Up feature allows Sub-Acquirers to enable their merchants to register independently using a dedicated, branded sign-up link. This simplifies the onboarding process by eliminating the need for manual merchant creation from the Sub-Acquirer dashboard.",
        "howToTitle": "How to Get Started",
        "steps": [
            {
                "title": "Step 1: Send an Email Request",
                "desc": "To activate this feature, you must send a formal request to SriPay to enable Merchant Self Sign-Up for your Sub-Acquirer account.",
                "email": "support@sripay.lk",
                "subject": "Request for Merchant Self Sign-Up Enablement",
                "include": [
                    "Your Sub-Acquirer Name and ID",
                    "Contact Person Details",
                    "Preferred branding details (optional â logo, color theme)"
                ]
            },
            {
                "title": "Step 2: SriPay Review & Enablement",
                "points": [
                    "SriPay will review your request and configure a custom sign-up URL.",
                    "The sign-up page will include your Sub-Acquirerâs name and branding colors.",
                    "You will be notified once the link is ready to be shared with merchants."
                ]
            },
            {
                "title": "Step 3: Merchant Access & KYC Submission",
                "points": [
                    "Merchants can use the self-registration link to:",
                    "Create their account",
                    "Submit KYC information",
                    "Upload required documents",
                    "All submitted applications will appear under your Sub-Acquirer Dashboard for review."
                ]
            },
            {
                "title": "Step 4: Proceed with Standard Evaluation Process",
                "desc": "Once submitted, these merchants will follow the same approval flow:",
                "flow": "Sub-Acquirer Review â SriPay Review â Alipay Review â Activation"
            }
        ],
        "benefitsTitle": "Benefits of Merchant Self Sign-Up",
        "benefits": [
            "Saves time for Sub-Acquirers by reducing manual entry.",
            "Enables merchants to take ownership of their onboarding.",
            "Ensures faster scaling for large merchant acquisition campaigns.",
            "Fully integrated into the existing evaluation and compliance workflow."
        ],
        "note": "All merchant data collected through the self-sign-up page is secure and traceable under your Sub-Acquirer ID.",
        "troubleshoot": "Troubleshooting"
    },
    "storeUserAssign": {
        "title": "Assigning Store Users",
        "desc": "Store User Management allows the Acquirer to assign users specifically to a store. These users will be responsible for handling store-level tasks such as viewing transactions, accessing terminals, or processing orders depending on their roles.",
        "instructionsTitle": "To Assign users for a specific store:",
        "steps": [
            "Navigate to the Stores tab.",
            "From the store list, click View (: > View) on the relevant store.",
            "Navigate to the Add user to the outlet section inside the store profile."
        ],
        "note": "Note: Store users should be added by the merchant before assigning them to a store."
    },
    "storeCreate": {
        "title": "Creating a New Store",
        "step1Title": "Step 1: Navigate to Merchant List",
        "step1": [
            "Go to the Merchants tab and locate the merchant for whom you want to create a store.",
            "Click on the 3-dot action menu next to the merchant entry.",
            "From the action menu, click Create Store to begin the process."
        ],
        "step2Title": "Step 2: Fill Store Information",
        "step2FieldsIntro": "You'll see fields for",
        "step2Fields": [
            "Store Name â The official name of the store/outlet.",
            "Store Phone â Direct store contact number.",
            "Store Email â Storeâs email address for communication.",
            "Province / District / City / Street â Physical location fields to map the store accurately.",
            "Store QR currency â Select the preferred currency for your storeâs QR code transactions.",
            "Store Website â Include the storeâs official website URL. If a dedicated outlet site is unavailable, you may use the main business website."
        ],
        "step2FieldsNote": "These fields help ensure each store is uniquely identifiable by address and contact details.",
        "step3Title": "Step 3: Enter Bank Account Details",
        "step3Intro": "To enable seamless settlement of funds, please provide your storeâs bank account details. You may configure both Primary and Secondary settlement accounts. Only one account can be set as the default settlement account.",
        "step3PrimaryTitle": "Primary Bank Account",
        "step3PrimaryDesc": "This account will be used as the default for receiving settlement payments unless changed manually.",
        "step3PrimaryFieldsTitle": "Required Fields",
        "step3PrimaryFields": [
            "Bank Type: Choose between Local or International bank account.",
            "Settlement Currency: Select LKR or USD depending on your account preference.",
            "Bank Name: Choose your bank from the list provided.",
            "Bank Code: Input the official bank code.",
            "Branch Name: Enter the name of the bank branch.",
            "Branch Code: Provide the correct branch code for reference.",
            "Account Number: Enter the full bank account number used for settlements.",
            "Account Name: Input the name under which the account is registered."
        ],
        "step3SecondaryTitle": "Secondary Bank Account (Optional)",
        "step3SecondaryDesc": "This optional account acts as a backup for settlement purposes and can be activated when needed.",
        "step3SecondaryFieldsTitle": "Required Fields (same as Primary Bank Account)",
        "step3SecondaryNote": "You can also toggle the option to Set as default settlement account if you prefer this to be the primary method of receiving payments.",
        "step3Note": "Note: Ensure all information is accurate. Incorrect details may delay or reject settlements.",
        "step3Next": "Click Next to proceed once all mandatory details are entered correctly.",
        "step4Title": "Step 4: Submit Store Details",
        "step4Intro": "To finalize your store registration, please complete the following required details. This information helps verify and activate your store for customer-facing services and settlements.",
        "step4FrontTitle": "Store Front Photos",
        "step4FrontDesc": "Upload clear exterior photos of your store front. This helps in authenticating the physical existence and visibility of the outlet.",
        "step4FrontNote": "Ensure the store name board is clearly visible in the image.",
        "step4InteriorTitle": "Interior Photos",
        "step4InteriorDesc": "Upload clear interior photos of your store. This helps in verifying the operational nature and layout of your outlet.",
        "step4InteriorNote": "Make sure the images represent the actual setup of the store (e.g., counters, displays, signage).",
        "step4MobileTitle": "Mobile Number",
        "step4MobileDesc": "Provide a valid mobile number for store-level communication and verification.",
        "step4MobileList": [
            "Must be active and reachable.",
            "Click âVerify Phone Numberâ to receive and confirm a verification code."
        ],
        "step4EmailTitle": "Email Address",
        "step4EmailDesc": "Enter a valid email address for official communications related to settlements, support, and notifications.",
        "step4EmailList": [
            "Click âVerify Emailâ to authenticate the email before submission."
        ],
        "step4VerifyNote": "Both phone and email must be verified before submitting the setup.",
        "step4Submit": "Click Submit once all fields are filled and verified to complete your store onboarding.",
        "step5Title": "Step 5: Acquirer Store Evaluation",
        "step5Intro": "Once a store is submitted, it enters the Pending Requests stage for review and evaluation by the acquirer. The approval process ensures store legitimacy and compliance before activation.",
        "step5PendingTitle": "Pending Requests Dashboard",
        "step5PendingDesc": "On the Pending Requests page, acquirers can,",
        "step5PendingList": [
            "View all outlet submissions categorized by their current status:",
            "Track requests using columns for Store Name, ID, City, Status, and Submitted Date.",
            "Use filters or search functionality to locate specific records."
        ],
        "step5PendingStatus": [
            "Awaiting Acquirer In Progress",
            "Awaiting Sripay In Progress",
            "Awaiting Alipay In Progress",
            "Rejected"
        ],
        "step5EvalTitle": "Store Evaluation Panel",
        "step5EvalDesc": "Clicking on the three dots â® on request opens a detailed Store Evaluation view that includes:",
        "step5EvalList": [
            "Store Information",
            "Store Photos",
            "Merchant Information",
            "Contact Information"
        ],
        "step5EvalStoreInfo": [
            "Store Name, Store ID, Email (with verification status)",
            "Website, QR Currency, Channel Fee, and Commission Rate",
            "Timestamps (Created At & Updated At)",
            "Current Status"
        ],
        "step5EvalStorePhotos": [
            "Review uploaded Interior and Storefront photos to validate store presence."
        ],
        "step5EvalMerchantInfo": [
            "Merchant ID, Name, and Category (e.g., Retail, Restaurant)"
        ],
        "step5EvalContactInfo": [
            "Mobile Number (with verification status)",
            "SMS & Email Notification settings",
            "Website & Email notification settings",
            "Option to Set as Top Outlet (if applicable)"
        ],
        "step6Title": "Step 6: Approval Actions",
        "step6Intro": "Evaluators can take the following actions from the dropdown",
        "step6Actions": [
            "Send for Sripay Approval\nForwards the request to Sripayâs internal review team.",
            "Reject\nDeclines the request with a confirmation prompt to prevent accidental action."
        ],
        "step6Dialog": "Each action triggers a confirmation dialog displaying:",
        "step6DialogList": [
            "Selected action",
            "Request ID",
            "Options to cancel or proceed"
        ],
        "step6Note": "Note: Once a request is sent to Sripay or rejected, its status updates in real time.",
        "step6Confirm": "Click Confirm to finalize your selected action.",
        "step7Title": "Step 7: SriPay Evaluation",
        "step7Intro": "If the Sub-Acquirer sends the application forward, it moves to the SriPay Admin Panel for a second-level review.",
        "step7AdminTitle": "SriPay Admin can:",
        "step7AdminList": [
            "Approve and forward to Alipay",
            "Reject with comments and notify Sub-Acquirer"
        ],
        "step7NotifTitle": "System Notifications:",
        "step7NotifList": [
            "Sub-Acquirer is notified of SriPayâs decision",
            "Merchant store remains in âSriPay In Progressâ until final decision"
        ],
        "step8Title": "Step 8: Alipay Evaluation",
        "step8Intro": "If SriPay approves the application, it is submitted to Alipay+ Team. This includes an automatic or manual compliance check by Alipay.",
        "step8AdminTitle": "Alipay+ Admin can:",
        "step8AdminList": [
            "Approve: Merchant store is now live for payment acceptance",
            "Reject: Sent back with reason; Sub-Acquirer and SriPay are notified"
        ],
        "step9Title": "Troubleshooting"
    },
    "terminalManagement": {
        "title": "Terminal Management",
        "desc": "Terminal Management allows the Acquirer to configure and associate terminals (typically POS devices or QR interfaces) with each store. This setup is essential for enabling real-time transactions, QR scanning, and accurate transaction mapping per outlet.",
        "accessTitle": "Accessing Terminal Management",
        "accessDesc": "To manage terminals for a specific store:",
        "accessSteps": [
            "Go to the Stores section.",
            "Select View (: > View) on the desired store.",
            "Navigate to the Terminals section."
        ],
        "addTitle": "Adding a Terminal",
        "addDesc1": "After a store is approved, you can begin assigning terminals for transactions. A terminal represents a specific POS (Point of Sale) device or checkout point within the store.",
        "addDesc2": "Click on Create New Terminal on the Terminal section.",
        "optionTitle": "Option Selection â Single vs. Multiple Terminals",
        "optionDesc": "Start by selecting whether you want to create a Single Terminal or Multiple Terminals.",
        "optionList": [
            "Single Terminal: For stores with one checkout or payment point.",
            "Multiple Terminals: For stores with several counters/devices (e.g., supermarkets or chains)."
        ],
        "optionNext": "Click Next after making your selection.",
        "singleTitle": "Creating a Single Terminal",
        "singleList": [
            "Terminal ID: A unique identifier (e.g., T001).",
            "Terminal Name: Assign a label (e.g., Terminal A).",
            "Terminals: Shows current number of terminals in the store."
        ],
        "singleNext": "Click Yes to proceed and save the terminal.",
        "multiTitle": "Creating Multiple Terminals",
        "multiList": [
            "Enter Number of Terminals you wish to create (e.g., 5)."
        ],
        "multiNext": "Click Submit to auto-generate terminal IDs and assign them to the store.",
        "statusTitle": "Activate or Deactivate Terminal",
        "statusList": [
            "They will appear in the Terminals Table.",
            "Status will indicate whether each terminal is active or deactive.",
            "You can manage each terminal individually via the Action button."
        ],
        "statusNoteTitle": "Note:",
        "statusNote": "When activating or deactivating a terminal, a confirmation model will appear. You must click \"OK\" to proceed with the action.",
        "troubleshootTitle": "Troubleshooting"
    },
    "merchantSuspend": {
        "title": "Suspending Merchant",
        "howToTitle": "How to suspend a merchant:",
        "steps": [
            "Click on the three dots ââ®â next to the merchant name.",
            "Select Suspend.",
            "A popup will prompt you to enter a reason before confirming the suspension."
        ],
        "note": "Suspended merchants will be moved to the Suspended tab and can only be reactivated by contacting SriPay."
    },
    "activatingSuspend": {
        "title": "Activating Suspended Merchant",
        "howToTitle": "To activate a merchant after suspending:",
        "steps": [
            "Click on the three dots ââ®â and select Approve.",
            "A confirmation window will appear.",
            "Upon approval, the merchant status will change from âsuspendedâ to âapprovedâ."
        ]
    },
    "agreementUpload": {
        "title": "Uploading Merchant Agreements",
        "desc": "Sub-Acquirers must upload merchant agreements before a merchant can proceed.",
        "steps": [
            "Click Agreement from the merchantâs action menu",
            "A model appears displaying already uploaded files and a button to Select PDF or Image"
        ],
        "keyPointsTitle": "Key Points:",
        "keyPoints": [
            "You can upload up to <1>5 agreement files</1>",
            "Uploaded files <1>cannot be deleted</1>",
            "Files must be in <1>PDF or image</1> format",
            "Merchants can <1>view uploaded agreements</1> in their own portal"
        ],
        "note": "This ensures transparency and legal compliance between SriPay, the Acquirer, and the merchant."
    },
    "troubleshooting": {
        "title": "Troubleshooting",
        "desc": "If you encounter issues during the merchant onboarding or bulk registration process, consider the following resolutions:",
        "excelTitle": "Excel Upload Errors",
        "excel": [
            {
                "issue": "Invalid file type",
                "solution": "Ensure the file is in .xlsx format. .xls, .csv, or .ods are not accepted."
            },
            {
                "issue": "Column headers in sheet âMerchantâ were modified",
                "solution": "Do not rename, remove, or reorder any column headers in the sample Excel."
            },
            {
                "issue": "Missing value for [Field]",
                "solution": "Every row must contain data for all required fieldsâespecially email, mobile, and registration details."
            },
            {
                "issue": "Excel file does not match the SriPay template",
                "solution": "Download the latest sample Excel from the platform and follow the format exactly."
            }
        ],
        "docTitle": "Uploaded Document Issues",
        "docIssue": "Reviewer cannot access uploaded files",
        "docSolution": "Ensure all document URLs are set to âAnyone with the link can viewâ before submitting. This allows all reviewers (Sub-Acquirer â SriPay â Alipay) to access them.",
        "kycTitle": "KYC Rejections",
        "kycReasonsTitle": "Common Reasons:",
        "kycReasons": [
            "Mismatched registration details and document names",
            "Invalid or incomplete contact information",
            "Poor-quality or incorrect document uploads"
        ],
        "kycSolution": "Double-check all entries and uploaded documents before submission."
    },
    "faq": {
        "title": "Frequently Asked Questions",
        "questions": [
            {
                "q": "Q1: Can I edit a merchantâs KYC after submission?",
                "a": "A: No. Once submitted, edits cannot be made. You must reject the submission and ask the merchant to re-register."
            },
            {
                "q": "Q2: What types of businesses are supported?",
                "a": "A: SriPay supports Sole Proprietorships, Partnerships, Private and Public Limited Companies across a wide range of industries."
            },
            {
                "q": "Q3: Can I use my own Merchant ID?",
                "a": "A: Yes. If your custom Merchant ID is available, the system will validate and accept it."
            },
            {
                "q": "Q4: What happens after I approve a merchant?",
                "a": "A: The request is forwarded to SriPay for second-level review, then to Alipay for final evaluation. You will be notified at each stage."
            },
            {
                "q": "Q5: What if two merchants have the same email?",
                "a": "A: Duplicate emails are not allowed. Each merchant must register with a unique email address."
            }
        ]
    },
    "support": {
        "title": "Support Information",
        "intro": "If you need assistance, please contact the SriPay Sub-Acquirer Support Team",
        "emailSection": {
            "title": "Email",
            "desc": "Contact the specific business or technical support team relevant to your needs, and we will get back to you within 1 business day:",
            "label": "SriPay Sub-Acquirer support",
            "address": "Address:",
            "email": "admin@sripay.lk",
            "hours": "Working hours: 24 hours, MondayâSunday, UTC+8"
        },
        "websiteSection": {
            "title": "Website",
            "desc": "Visit our official website for more details, documentation, and the latest updates about our services.",
            "label": "SriPay Sub-Acquirer support",
            "linkLabel": "Web Link:",
            "url": "www.sripay.lk"
        },
        "mobileSection": {
            "title": "Mobile",
            "desc": "Reach out directly via phone for immediate assistance with merchant handling or technical support.",
            "merchantLabel": "SriPay Merchant Sub-Acquirer support",
            "merchantMobile": "+94 76 703 5500 (Ms. Nishadi)",
            "techLabel": "SriPay Sub-Acquirer Technical support",
            "techMobile": "+94 76 664 1614 (Mr. Rusith)",
            "hours": "Working hours: 24 hours, MondayâSunday, UTC+8"
        }
    },
    "rightsidemenu": {
        "onthispage": "On this page",
        "ishelpful": "Is this page helpful?"
    },
    "merchantgettingstart": {
        "title": "Getting Started",
        "title2": "If you want to become a Merchant via SriPay ?",
        "desription1": {
            "section1": "Merchants can register directly with",
            "section2": "as an acquirer using",
            "section3": "link. Merchants should provide valid details in this process."
        },
        "title3": "Do you have an Acquirer?",
        "desription2": {
            "section1": "Merchants can also sign up through their respective acquirer, who partners with SriPay."
        },
        "signup": "Sign Up ",
        "step1": {
            "title": " Step 1 :",
            "desc": "Enter your personal details such as first name, last name, mobile number, and email address accurately to begin the sign-up process."
        },
        "step2": {
            "title": " Step 2 :",
            "desc": "Verify your mobile number using the OTP sent to your registered phone to proceed securely."
        },
        "step3": {
            "title": " Step 3 :",
            "desc": "Set up your account by creating a password and agreeing to the terms to complete registration."
        },
        "sections": {
            "section1": "Sign up details form",
            "section2": "Verify Mobile Number",
            "section3": "Create Password"
        }
    },
    "merchantcategories": {
        "title": "MCC List",
        "desc": " Below is the list of Merchant Category Codes (MCC) used by SriPay. These codes are essential for categorizing merchants based on the type of goods or services they provide.",
        "desc2": " A1: Codes defined by ISO 18245",
        "sections": {
            "section1": "MCC List",
            "section2": "A1: Codes defined by ISO 18245",
            "section3": "A2: Codes defined by SriPay for private use"
        }
    },
    "selfregistration": {
        "desc": "Once a merchant signs up and logs in to the SriPay system, they are automatically redirected to this registration workflow. This form is essential to complete their onboarding process. After submitting all required information, the merchant will be placed on a waiting list  until the assigned Acquirer reviews and approves the application.",
        "step1": "Step 1: Registration Details",
        "step2": "Step 2: Address Details",
        "step3": "Step 3: Business Contact Person",
        "step4": "Step 4: Business Activities",
        "step5": "Step 5: Company Settlement Bank Details",
        "step6": "Step 6: Owner Details",
        "step7": "Step 7: Review & Submit KYC Summary",
        "step8": "Step 8: Constitutional Documents",
        "des": {
            "sub1": "Auto-generated summary of all completed fields",
            "sub2": "Merchant can reviews and confirms final submission",
            "sub3": "Constitutional Documents can update following below steps after merchant registration:",
            "sub4": "Navigate to Home then select Profile go to My Account, choose KYC, and finally select Constitutional Documents."
        },
        "sections": {
            "section1": "Registration Details",
            "section2": "Address Details",
            "section3": "Business Contact Person",
            "section4": "Business Activities",
            "section5": "Company Settlement Bank Details",
            "section6": "Owner Details",
            "section7": "Review & Submit KYC Summary",
            "section8": "Constitutional Documents"
        }
    },
    "viewallstore": {
        "title2": " Merchants can apply under the following three categories:",
        "category1": "In-Store",
        "category2": "Online",
        "category3": " Visa / Master",
        "title3": "Once a store is created, its visibility depends on the current status:",
        "status": {
            "status1": "Approved",
            "status2": "Draft",
            "status3": "Rejected"
        },
        "desc1": "The store will appear under its corresponding category (In-Store, Online, or Visa/Master).",
        "desc2": "If the store creation process is incomplete, it will appear in the 'Draft' section.",
        "desc3": " If the store is rejected by Alipay, it will be listed under the 'Rejected' section."
    },
    "singlestorecreation": {
        "title": "Single Store Creation",
        "sectionsMenu": {
            "section1": "Navigating Stores Tab",
            "section2": "Selecting Single Store Option",
            "section3": "Filling Store Information",
            "section4": "Entering Bank Account Details",
            "section5": "Submitting Store Details",
            "section6": "Evaluation Procedure",
            "section7": "Troubleshooting"
        },
        "alts": {
            "step1": "Step 1: Navigate to Stores Tab",
            "step2": "Step 2: Select Single Store Option",
            "step3": "Step 3: Fill Store Information",
            "step4": "Step 4: Enter Bank Account Details",
            "step5": "Step 5: Submit Store Details"
        },
        "steps1": {
            "title": "Step 1: Navigate to Stores Tab",
            "subtitle1": "Go to the Stores section from the Top Navigation Bar.",
            "subtitle2": "Click the Create Store button."
        },
        "steps2": {
            "title": "Step 2: Select Single Store Option",
            "subtitle1": "You'll see 2 options for store creation",
            "option1": {
                "title": "Single Store",
                "desc": "This option is to create a single store."
            },
            "option2": {
                "title": "Multiple Stores",
                "desc": "This option is to create multiple stores at once."
            },
            "subtitle2": "From there, pick the Single Store option and click the Next button."
        },
        "steps3": {
            "title": "Step 3: Fill Store Information",
            "subtitle1": "You'll see fields for",
            "filed1": {
                "title": "Store Name",
                "desc": "The official name of the store/outlet."
            },
            "filed2": {
                "title": "MCC",
                "desc": "Category of the merchant."
            },
            "filed3": {
                "title": "Store Email",
                "desc": "Storeâs email address for communication."
            },
            "bullets": {
                "address": "Country / Province / District / City / Street / Longitude / Latitude â Physical location fields to map the store accurately.",
                "qrCurrency": "Store QR currency â Select the preferred currency for your storeâs QR code transactions.",
                "website": "Store Website â Include the storeâs official website URL. If a dedicated outlet site is unavailable, you may use the main business website.",
                "note": "These fields help ensure each store is uniquely identifiable by address and contact details."
            }
        },
        "steps4": {
            "title": "Step 4: Enter Bank Account Details",
            "para": "To enable seamless settlement of funds, please provide your store's bank account details. You may configure both Primary and Secondary settlement accounts. Only one account can be set as the default settlement account.",
            "primaryTitle": "Primary Bank Account",
            "primaryDesc": "This account will be used as the default for receiving settlement payments unless changed manually.",
            "requiredFields": "Required Fields",
            "primaryList": {
                "bankName": "Bank Name: Select from the dropdown of supported financial institutions.",
                "branchName": "Branch Name: Include the specific branch where the account was opened.",
                "branchCode": "Branch Code: Include the specific branch code where the account was opened.",
                "branchAddr": "Branch Street / City / Postal Code: Include the branch street, city, and postal code.",
                "country": "Bank Country: Select the country where the bank is located.",
                "accName": "Account Name: Input the name under which the account is registered.",
                "accNumber": "Account Number: Enter the full bank account number without spaces.",
                "currency": "Currency: Select the currency for this settlement account (e.g., USD, LKR).",
                "swift": "Swift/BIC Code: Required for international transfers, especially USD accounts.",
                "status": "Settlement Status: Active by default, indicates this account is ready to receive funds."
            },
            "secondaryTitle": "Secondary Bank Account (Optional)",
            "secondaryDesc": "This optional account acts as a backup for settlement purposes and can be activated when needed.",
            "secondaryReq": "Required Fields (same as Primary Bank Account)",
            "secondaryNote": "You can also toggle the option to set this as the default settlement account if you prefer it as the primary method of receiving payments.",
            "noteLabel": "Note:",
            "noteDesc": "Ensure all information is accurate. Incorrect details may delay or reject settlements.",
            "next": "Click Next to proceed once all mandatory details are entered correctly."
        },
        "steps5": {
            "title": "Step 5: Submit Store Details",
            "para": "To finalize your store registration, please complete the following required details. This information helps verify and activate your store for customer-facing services and settlements.",
            "frontPhotosTitle": "Store Front Photos",
            "frontPhotosDesc": "Upload clear exterior photos of your storefront. This helps authenticate the physical existence and visibility of the outlet.",
            "frontPhotosNote": "Ensure the store name board is clearly visible in the image.",
            "interiorPhotosTitle": "Interior Photos",
            "interiorPhotosDesc": "Upload clear interior photos of your store. This helps verify the operational nature and layout of your outlet.",
            "interiorPhotosNote": "Make sure the images represent the actual setup of the store (e.g., counters, displays, signage).",
            "mobileTitle": "Mobile Number",
            "mobileDesc": "Provide a valid mobile number for store-level communication and verification.",
            "mobileList": {
                "active": "Must be active and reachable.",
                "verify": "Click \"Verify Phone Number\" to receive and confirm a verification code."
            },
            "emailTitle": "Email Address",
            "emailDesc": "Enter a valid email address for official communications related to settlements, support, and notifications.",
            "emailList": {
                "verify": "Click \"Verify Email\" to authenticate the email before submission."
            },
            "submitNote": "Both phone and email must be verified before submitting the setup.",
            "submitCta": "Click Submit once all fields are filled and verified to complete your store onboarding."
        },
        "evaluation": {
            "title": "Store Evaluation Procedure",
            "acquirerTitle": "Acquirer Evaluation",
            "acquirerPara": "Once a store is submitted, it enters the Pending Requests stage for review and evaluation by the acquirer. The approval process ensures store legitimacy and compliance before activation.",
            "sripayTitle": "SriPay Evaluation",
            "sripayPara": "If the Sub-Acquirer sends the application forward, it moves to the SriPay Admin Panel for a second-level review.",
            "sripayCan": "SriPay Admin can:",
            "sripayList": {
                "approve": "Approve and forward to Alipay",
                "reject": "Reject with comments and notify Sub-Acquirer"
            },
            "sysNote": "System Notifications:",
            "sysList": {
                "notify": "Sub-Acquirer is notified of SriPay's decision",
                "progress": "Merchant store remains in \"SriPay In Progress\" until final decision"
            },
            "alipayTitle": "Alipay Evaluation",
            "alipayPara": "If SriPay approves the application, it is submitted to the Alipay+ Team. This includes an automatic or manual compliance check by Alipay.",
            "alipayCan": "Alipay+ Admin can:",
            "alipayList": {
                "approve": "Approve: Merchant store is now live for payment acceptance",
                "reject": "Reject: Sent back with reason; Sub-Acquirer and SriPay are notified"
            }
        },
        "troubleshooting": {
            "title": "Troubleshooting",
            "draftQ": "What does the \"Save as Draft\" button do?",
            "draftA": "It allows you to save your progress without submitting the form. You can return later to complete the submission.",
            "saveQ": "Store details are not saving or submitting",
            "saveA": "Check that all required fields are filled and formatted correctly. Look for any validation errors highlighted on the form. Try refreshing the page or clearing your browser cache if the problem persists.",
            "bankQ": "Bank account information is being rejected",
            "bankA": "Double-check that all bank details match the required format and are correct. Only one account can be set as default. If unsure, contact your bank or support.",
            "photoQ": "Photo uploads are failing or not accepted",
            "photoA": "Make sure your images are clear, in JPG or PNG format, and do not exceed the maximum file size. The store name board and interior should be clearly visible.",
            "pageQ": "Page is not loading or is stuck",
            "pageA": "Check your internet connection and try reloading the page. If the issue continues, try a different browser or device."
        }
    },
    "multiplestorecreation": {
        "title": "Multiple Store Creation",
        "workflow": "Creation Workflow",
        "intro": "This feature allows Merchants to create multiple stores simultaneously using a predefined Excel template.",
        "sectionsMenu": {
            "section1": "Navigate to Multiple Store Creation",
            "section2": "Multiple Stores Option",
            "section3": "Understand the Upload Modal",
            "section4": "Download & Fill the Sample Excel",
            "section5": "Upload and Validate the Excel File",
            "section6": "Upload Progress",
            "section7": "Store Evaluation Procedure",
            "section8": "Troubleshooting"
        },
        "alts": {
            "step1": "Step 1: Navigate to Stores Tab",
            "step2": "Step 2: Select Multiple Store Option",
            "step3": "Step 3: Understand the Upload Modal",
            "step4": "Step 4: Download & Fill the Sample Excel",
            "step5": "Step 5: Upload and Validate the Excel File",
            "step6": "Step 6: Upload Progress"
        },
        "steps1": {
            "title": "Step 1: Navigate to Stores Tab",
            "li1": "Go to the Stores section from the Top Navigation Bar.",
            "li2": "Click the Create Store button."
        },
        "steps2": {
            "title": "Step 2: Select Multiple Store Option",
            "p1": "You'll see 2 options for store creation.",
            "single": "Single Store â This option is to create a single store.",
            "multiple": "Multiple Stores â This option is to create multiple stores at once.",
            "p2": "From there pick the Multiple Store option and click Next button."
        },
        "steps3": {
            "title": "Step 3: Understand the Upload Modal",
            "includes": "The modal includes",
            "li1": "Excel File Upload Area â drag/drop or browse to upload.",
            "li2": "Download Sample Excel â click this to get the correct format.",
            "li3": "Important Note â file must be .xlsx, and all images/documents must be pre-uploaded."
        },
        "steps4": {
            "title": "Step 4: Download & Fill the Sample Excel",
            "ol1": "Click \"Download Sample Excel\" to get the correct format.",
            "rulesTitle": "Important Rules to follow when filling the excel file:",
            "r1": "Do not rename headers.",
            "r2": "Do not remove any column.",
            "r3": "Every row must contain valid entries for all columns.",
            "r4": "Email must be unique and properly formatted.",
            "r5": "Mobile number must follow a valid format (+94).",
            "r6": "Ensure that all uploaded document URLs are publicly accessible to anyone with the link.",
            "r7": "Because evaluation involves SubâAcquirer, SriPay, and Alipay, document URLs must be publicly accessible to ensure seamless review across all stages."
        },
        "steps5": {
            "title": "Step 5: Upload and Validate the Excel File",
            "li1": "Click the upload box or drag your completed .xlsx file into it.",
            "table": {
                "h1": "Validation Type",
                "h2": "What It Checks",
                "h3": "Error Example on UI",
                "row1c1": "File Format",
                "row1c2": "Only .xlsx accepted",
                "row1c3": "Invalid file type",
                "row2c1": "Column Headers",
                "row2c2": "Exact match with template",
                "row2c3": "Column headers in sheet \"Merchant\" were modified...",
                "row3c1": "Required Fields",
                "row3c2": "No blank Store Name, Email, etc.",
                "row3c3": "Row 2: missing value for Store Name"
            },
            "onFailTitle": "If validation fails",
            "onFail1": "A red error modal will appear showing the exact issue.",
            "onFail2": "Click \"OK\", fix the Excel file, and re-upload.",
            "imgAlt": "Validation UI"
        },
        "steps6": {
            "title": "Step 6: Upload Progress",
            "imgAlt": "Upload Progress",
            "passTitle": "If the file passes validation",
            "li1": "You will see the message: \"Uploading Stores...\" or something similar.",
            "li2": "Wait until the process completes and the modal closes."
        },
        "evaluation": {
            "title": "Store Evaluation Procedure",
            "acquirerTitle": "Acquirer Evaluation",
            "acquirerPara": "Once a store is submitted, it enters the Pending Requests stage for review and evaluation by the acquirer. The approval process ensures store legitimacy and compliance before activation.",
            "sripayTitle": "SriPay Evaluation",
            "sripayPara": "If the Sub-Acquirer sends the application forward, it moves to the SriPay Admin Panel for a second-level review.",
            "sripayCan": "SriPay Admin can:",
            "sripayApprove": "Approve and forward to Alipay",
            "sripayReject": "Reject with comments and notify Sub-Acquirer",
            "sysNote": "System Notifications:",
            "sysNotify": "Sub-Acquirer is notified of SriPay's decision",
            "sysProgress": "Merchant store remains in \"SriPay In Progress\" until final decision",
            "alipayTitle": "Alipay Evaluation",
            "alipayPara": "If SriPay approves the application, it is submitted to Alipay+ Team. This includes an automatic or manual compliance check by Alipay.",
            "alipayCan": "Alipay+ Admin can:",
            "alipayApprove": "Approve: Merchant store is now live for payment acceptance",
            "alipayReject": "Reject: Sent back with reason; Sub-Acquirer and SriPay are notified"
        },
        "troubleshooting": {
            "title": "Troubleshooting",
            "q1": "My Excel file upload fails or is rejected.",
            "a1": "Ensure you are using the latest template provided by the system. Double-check that all required columns are present and that there are no empty mandatory fields. Remove any custom extra formatting or merged cells.",
            "q2": "I get a \"format error\" or \"invalid data\" message.",
            "a2": "Make sure all fields follow the required format (e.g., phone numbers, emails, IDs). Refer to the rules and examples shown above for each column.",
            "q3": "The page is not loading or is stuck.",
            "a3": "Check your internet connection and try reloading the page. If the issue continues, try using a different browser or device."
        }
    },
    "storeusersassign": {
        "title": "Assigning Store Users",
        "menu": {
            "add": "Add Store Users",
            "deactivate": "Store user deactivate"
        },
        "intro": "To assign a store user, the merchant must complete the 'Add Store User' form by providing the user's Full Name, Email Address, and Password. An OTP (One-Time Password) will be sent to the entered email address for verification. The user must verify the email before activating their account.",
        "stepsTitle": "Steps to Assign Store Users",
        "step1": "Step 1: Go to My Account and select Store Users. Then click the Add Store User button.",
        "step2": "Step 2: Click the Add Store User button to open the form.",
        "manage": "To update a store user's information or change their status, click the action menu (three dots) in the row. From there, select Edit to modify user details or Deactivate to revoke access.",
        "alts": {
            "nav": "Navigate to Store Users",
            "form": "Add Store User Form",
            "edit": "Edit Store User"
        }
    },
    "terminalmanagement": {
        "title": "Terminal Management",
        "intro": "Terminal Management allows the Merchant to configure and associate terminals with each store.",
        "sectionsMenu": {
            "section1": "Accessing Terminal Management",
            "section2": "Adding a Terminal",
            "section3": "Option Selection â Single vs. Multiple Terminals",
            "section4": "Creating a Single Terminal",
            "section5": "Creating Multiple Terminals",
            "section6": "Activate or Deactivate Terminal",
            "section7": "Troubleshooting"
        },
        "alts": {
            "img1": "Accessing Terminal Management",
            "img2": "Add Terminal from three-dots menu",
            "img3": "Add Terminal from Terminal section",
            "img4": "Single vs. Multiple Terminal selection",
            "img5": "Creating a Single Terminal",
            "img6": "Creating Multiple Terminals",
            "img7": "Terminal Status View"
        },
        "section1": {
            "title": "Accessing Terminal Management",
            "lead": "To manage terminals for a specific store",
            "ol": {
                "li1": "Navigate to the Store section.",
                "li2": "Select the store you want to manage terminals for by clicking on the store.",
                "li3": "View the list of existing terminals or create new ones."
            },
            "importantLabel": "Important:",
            "important": "Terminal management for a store is permitted only once that storeâs status has been set to Approved."
        },
        "section2": {
            "title": "Adding a Terminal",
            "p1": "After a store is approved, you can begin assigning terminals for transactions. A terminal represents a specific POS (Point of Sale) device or checkout point within the store.",
            "placesTitle": "Terminals can be added from 2 places.",
            "fromMenu": "From the three-dots menu â¦ next to Commission Rate",
            "fromSection": "From the Terminal section"
        },
        "section3": {
            "title": "Option Selection â Single vs. Multiple Terminals",
            "p1": "Start by selecting whether you want to create a Single Terminal or Multiple Terminals.",
            "bullets": {
                "single": "Single Terminal: For stores with just one checkout point or counter.",
                "multiple": "Multiple Terminals: For stores with several counters/devices (e.g., supermarkets or chains)."
            },
            "p2": "Click Next after making your selection to proceed with the creation process."
        },
        "section4": {
            "title": "Creating a Single Terminal",
            "b1": "The terminal name will be automatically generated (e.g., Terminal 1).",
            "b2": "You cannot change the terminal name as it's system-generated for consistency.",
            "b3": "All created terminals are set to \"Active\" status by default.",
            "p": "Click Create to finalize your single terminal setup."
        },
        "section5": {
            "title": "Creating Multiple Terminals",
            "b1": "Enter the number of terminals you wish to create (e.g., 5) and click Create to generate multiple terminals at once.",
            "p": "This will create the specified number of terminals with sequential naming (Terminal 1, Terminal 2, etc.)."
        },
        "section6": {
            "title": "Activate or Deactivate Terminal",
            "b1": "To change a terminal's status, locate it in the terminal list.",
            "b2": "Click the toggle switch in the \"Active\" column to activate or deactivate it.",
            "b3": "Inactive terminals will not be available for payment processing until reactivated.",
            "noteLabel": "Note:",
            "noteDesc": "Status changes take effect immediately, but may require up to 5 minutes to propagate across all systems."
        },
        "section7": {
            "title": "Troubleshooting",
            "q1": "I can't add a terminal or the \"Add Terminal\" button is disabled.",
            "a1": "Ensure you have the correct permissions and have selected a merchant/store. If the merchant or store is not approved, you may not be able to add terminals.",
            "q2": "I can't change the terminal name.",
            "a2": "You cannot change the default terminal name. Terminal names are auto-generated based on the terminal count.",
            "q3": "The page is not loading or is stuck.",
            "a3": "Check your internet connection and try reloading the page. If the issue continues, try using a different browser or device."
        }
    },
    "instore": {
        "title": "In-store payments",
        "heroLead": "Enable seamless in-store payments from global customers with one simple integration. Discover how advanced digital payment solutions and QR code technology can streamline transactions, reduce costs, and enhance the customer experience at your physical store.",
        "videoTitle": "QR Payment Video",
        "sectionsMenu": {
            "step1": "Create an Instore Transaction",
            "step2": "Select Payment Method",
            "step3": "Alipay Plus Details",
            "step4": "Scan QR Code",
            "step5": "Payment Complete"
        },
        "howTo": {
            "title": "How to create a Transaction?",
            "instruction": "Click",
            "navPath": "Transactions > Alipay+ InStore > Create Transaction",
            "bullets": {
                "store": "Select or type the Store",
                "terminal": "Select or type the Terminal",
                "purpose": "Select or type the Purpose of Payment"
            },
            "alts": {
                "createTx": "Create Transaction",
                "selectMethod": "Select Payment Method"
            }
        },
        "infoBanner": "Want to know more about each payment method? Click on any payment option below to learn how it works.",
        "methods": {
            "alipayPlus": {
                "cardTitle": "Alipay Plus",
                "cardDesc": "Customers scan the merchant-generated QR code with the order information to pay.",
                "detailsTitle": "Alipay Plus Details",
                "enterTitle": "Enter Transaction Value",
                "enterHint": "The merchant can choose the preferred currency type â either LKR or USD â before entering the amount.",
                "alts": {
                    "enter": "Enter Amount Screenshot",
                    "scan": "Scan QR",
                    "success": "Payment Success"
                },
                "scanTitle": "Scan QR Code",
                "scanTextPre": "Scan the QR code below using your device with the",
                "scanTextAnchor": "Alipay+ supported wallets",
                "scanTextPost": "app to complete the payment.",
                "completeTitle": "Payment Complete",
                "completeText": "After completing the payment, the merchant will see a \"Payment Received\" success message."
            },
            "scanPay": {
                "cardTitle": "Scan Pay QR Via Alipay Plus",
                "cardDesc": "Merchants scan the user-presented QR code to collect payment.",
                "detailsTitle": "Scan Pay QR Via Alipay Plus",
                "enterTitle": "Enter Transaction Value",
                "enterHint": "The merchant can choose the preferred currency type â either LKR or USD â before entering the amount.",
                "alts": {
                    "enter": "Scan QR Code",
                    "camera": "Camera Scanner Popup",
                    "success": "Payment Success"
                },
                "scanTitle": "Scan the QR Code",
                "scanText": "After creating the transaction, Alipay Plus generates a QR code. Use your deviceâs camera (as shown below) to scan and confirm the code securely.",
                "completeTitle": "Payment Complete",
                "completeText": "Once the payment is complete, the merchant will see a success message indicating \"Payment Received\"."
            },
            "sripay": {
                "cardTitle": "SriPay",
                "cardDesc": "Enable seamless in-store payments from global customers with one simple integration.",
                "soonTitle": "SriPay",
                "soonText": "This payment method is coming soon!",
                "soonSub": "Stay tuned for future updates."
            },
            "visamaster": {
                "cardTitle": "Visa/Master",
                "cardDesc": "Accept payments from global customers via credit or debit cards.",
                "detailsTitle": "Visa/Master Details",
                "p1": "Feature coming soon! Accept worldwide Visa/MasterCard payments securely at your counter.",
                "p2": "Youâll be able to accept both chip and contactless card payments."
            },
            "usdt": {
                "cardTitle": "USDT",
                "cardDesc": "Let your customers pay securely using Tether (USDT) cryptocurrency.",
                "detailsTitle": "USDT Details",
                "p1": "Coming soon: Accept payments in USDT, one of the worldâs leading cryptocurrencies.",
                "p2": "Seamless conversion to LKR with low transaction fees."
            }
        }
    },
    "online": {
        "title": "Online Payments",
        "heroLead": "A single integration into Antom allows you to accept all onboarded e-wallets, cards, and alternative payment methods. When new payment channels are onboarded in the future, you can also start accepting them with minimal effort.\n\nLearn how the different online payment types can facilitate your payment collection using the resources below.",
        "videoTitle": "QR Payment Video",
        "sectionsMenu": {
            "step1": "Create an Online Transaction",
            "step2": "Wallet Select",
            "step3": "Web Payment Flow",
            "step4": "Select Payment Method",
            "step5": "Payment Receipt Details"
        },
        "howTo": {
            "title": "How to create an Online Transaction?",
            "navPath": "Transactions > Alipay+ Online > Create Transaction",
            "alts": {
                "createTx": "Create Transaction screen",
                "selectMethod": "Select Payment Method screen"
            }
        },
        "note": "Note: If you are targeting a specific wallet for the transaction, you can click on the 'Target Wallet' tab to view all related information. If you are targeting all wallets, you can access the relevant details by clicking on the 'Target All Wallets' tab.",
        "tabs": {
            "targetWallet": "Target Wallet",
            "targetAllWallets": "Target All Wallets",
            "web": "Web",
            "mobile": "Mobile"
        },
        "targetWallet": {
            "lead": "When merchants target a wallet, they can proceed by choosing how the customer will complete the payment: either via Web or Mobile.",
            "web": {
                "title": "Web Payment Flow",
                "desc": "In this process, the merchant starts an Alipay+ transaction by choosing Web. A payment link is generated and can be shared directly with the customer, who completes payment in the browser.",
                "selectTitle": "Select Payment Method",
                "selectDesc": "Choose the preferred payment method for the transaction. Options include Alipay+ and SriPay.",
                "receiptTitle": "Payment Receipt Details",
                "receiptDesc": "Generate a QR code for customers to scan, or copy/share the payment link directly for flexible completion.",
                "alts": {
                    "flow": "Web Pay Flow",
                    "method": "Payment Method Selection",
                    "receipt": "Receipt / Share Options"
                }
            },
            "mobile": {
                "title": "Mobile Payment Flow",
                "desc": "Select Mobile as the user pay type to define the customerâs device environment. Then specify iOS/Android and In-App or In-Browser for a seamless experience.",
                "selectTitle": "Select Payment Method",
                "selectDesc": "Choose the preferred method (Alipay+ or SriPay) to determine processing flow and experience.",
                "receiptTitle": "Payment Receipt Details",
                "receiptDesc": "Complete the transaction with the payment link and share it with the customer.",
                "alts": {
                    "flow": "Mobile Pay Flow",
                    "method": "Payment Method Selection",
                    "receipt": "Payment Link Share"
                }
            }
        },
        "targetAll": {
            "lead": "When merchants target all wallets, they can still proceed using either Web or Mobile based on the option chosen below.",
            "web": {
                "title": "Web Payment Flow",
                "desc": "With Web as the user pay type, the customer completes payment directly in the browserâideal for desktop or app-free checkout.",
                "selectTitle": "Select Payment Method",
                "selectDesc": "Choose the preferred method (Alipay+ or SriPay) to determine processing flow and experience.",
                "receiptTitle": "Payment Receipt Details",
                "receiptDesc": "Complete the transaction using the payment link and share it with the customer.",
                "alts": {
                    "flow": "Web Pay Flow",
                    "method": "Payment Method Selection",
                    "receipt": "Receipt / Share Options"
                }
            },
            "mobile": {
                "title": "Mobile Payment Flow",
                "desc": "Select Mobile as the user pay type and then specify iOS/Android and In-App or In-Browser for a seamless experience.",
                "selectTitle": "Select Payment Method",
                "selectDesc": "Choose the preferred method (Alipay+ or SriPay) to determine processing flow and experience.",
                "receiptTitle": "Payment Receipt Details",
                "receiptDesc": "Generate a QR for scan-to-pay, or copy/share the payment link for flexible completion.",
                "alts": {
                    "flow": "Mobile Pay Flow",
                    "method": "Payment Method Selection",
                    "receipt": "Receipt / Share Options"
                }
            }
        }
    },
    "cardpayments": {
        "title": "Card Payments",
        "sectionsMenu": {
            "step1": "Introduction",
            "step2": "Payment Link Creation"
        },
        "intro": "SriPay offers seamless card payment acceptance through Visa, Mastercard, and UnionPay. Merchants can process both domestic and international transactions with ease, enabling fast, secure, and reliable card-based payments. Whether it's online or in-store, SriPay ensures a frictionless experience for your customers while maintaining the highest security standards.",
        "alts": {
            "ui": "Card Payment Interface Screenshot",
            "txn": "Card Transaction Screenshot"
        },
        "paymentLink": {
            "title": "Payment Link Creation",
            "p1": "This screen confirms that a merchant has successfully created a card payment link for a customer. The pop-up message âPayment Link Created Successfully!â indicates that the transaction has been initialized. The merchant can see key details such as:",
            "list": {
                "clientRef": "Client Reference â Unique transaction identifier for internal tracking.",
                "requestId": "Request ID â Unique request token for the payment API call.",
                "expiresAt": "Expires At â The date and time after which the payment link will no longer be valid.",
                "paymentUrl": "Payment Page URL â A secure link to the customer-facing payment page, which can be opened directly or copied for sharing."
            },
            "p2": "Below, thereâs an âOpen Payment Pageâ button for instant access, and the âNext Stepsâ note explains that the customer must complete payment before the expiry time."
        }
    },
    "instorereports": {
        "title": "Alipay+ In-Store Reports",
        "intro": "The Alipay+ In-Store Reports page provides merchants with a clear and comprehensive overview of all settled in-store transactions. It allows you to instantly generate detailed reports, track transaction performance, and monitor settlement history.",
        "sectionsMenu": {
            "step1": "Settled Transactions",
            "step2": "Settled Transactions Table",
            "step3": "Transaction Table Columns"
        },
        "alts": {
            "kpi": "Settled transactions overview with KPIs for success, refunded, voided and totals",
            "search": "Search controls for filtering transactions",
            "filter": "Filter dropdowns and date pickers",
            "columns": "Transaction table columns overview"
        },
        "settled": {
            "title": "Settled Transactions",
            "desc": "The Settled Transactions section provides merchants with a quick snapshot of all finalized in-store payment activities. It helps monitor transaction outcomes and assess overall business performance at a glance.",
            "kpis": {
                "success": "Success Transactions: Total number of payments that were completed successfully and settled.",
                "refunded": "Refunded Transactions: Total number of transactions where the payment amount was returned to the customer.",
                "voided": "Voided Transactions: Total number of payments that were canceled before settlement.",
                "total": "Total Value: Combined value of all settled transactions, displayed in both USD and LKR for clarity."
            }
        },
        "table": {
            "title": "Settled Transactions Table",
            "searchTitle": "Search Option",
            "filterTitle": "Filter Option"
        },
        "columns": {
            "title": "Transaction Table Columns",
            "labels": {
                "date": "Date",
                "id": "Transaction ID",
                "store": "Store Name",
                "currency": "Currency",
                "value": "Value",
                "status": "Status",
                "actions": "Actions"
            },
            "items": {
                "date": "Date and time when the transaction occurred.",
                "id": "Unique identifier assigned to each transaction.",
                "store": "Name of the merchant store where the transaction was made.",
                "currency": "The currency in which the transaction was processed.",
                "value": "Transaction amount.",
                "statusDesc": "Current transaction status â",
                "actions": "Options for further actions, such as viewing more details."
            },
            "statusBadges": {
                "success": "Success",
                "refunded": "Refunded",
                "voided": "Voided"
            }
        }
    },
    "onlinereports": {
        "title": "Alipay+ Online Reports",
        "intro": "The Alipay+ Online Reports page provides merchants with a clear and comprehensive overview of all settled online transactions. It allows you to instantly generate detailed reports, track transaction performance, and monitor settlement history.",
        "sectionsMenu": {
            "step1": "Settled Transactions",
            "step2": "Settled Transactions Table",
            "step3": "Transaction Table Columns"
        },
        "alts": {
            "kpi": "Settled transactions overview with KPIs for success, refunded, voided and totals",
            "search": "Search controls for filtering transactions",
            "filter": "Filter dropdowns and date pickers",
            "columns": "Transaction table columns overview"
        },
        "settled": {
            "title": "Settled Transactions",
            "desc": "The Settled Transactions section provides merchants with a quick snapshot of all finalized online payment activities. It helps monitor transaction outcomes and assess overall business performance at a glance.",
            "kpis": {
                "success": "Success Transactions: Total number of payments that were completed successfully and settled.",
                "refunded": "Refunded Transactions: Total number of transactions where the payment amount was returned to the customer.",
                "voided": "Voided Transactions: Total number of payments that were canceled before settlement.",
                "total": "Total Value: Combined value of all settled transactions, displayed in both USD and LKR for clarity."
            }
        },
        "table": {
            "title": "Settled Transactions Table",
            "searchTitle": "Search Option",
            "filterTitle": "Filter Option"
        },
        "columns": {
            "title": "Transaction Table Columns",
            "labels": {
                "date": "Date",
                "id": "Transaction ID",
                "store": "Store Name",
                "currency": "Currency",
                "value": "Value",
                "status": "Status",
                "actions": "Actions"
            },
            "items": {
                "date": "Date and time when the transaction occurred.",
                "id": "Unique identifier assigned to each transaction.",
                "store": "Name of the merchant store where the transaction was made.",
                "currency": "The currency in which the transaction was processed.",
                "value": "Transaction amount.",
                "statusDesc": "Current transaction status â",
                "actions": "Options for further actions, such as viewing more details."
            },
            "statusBadges": {
                "success": "Success",
                "refunded": "Refunded",
                "voided": "Voided"
            }
        }
    },
    "cardreports": {
        "title": "Card Payments Report",
        "intro": "SriPay enables merchants to accept secure and reliable card payments through Visa, Mastercard, and UnionPay, supporting both domestic and international transactions. The Card Payments Report provides a clear overview of all settled transactions, allowing merchants to generate detailed reports, track sales performance, and monitor settlement history. Whether payments are made online or in-store, SriPay ensures a fast, frictionless experience for customers while maintaining the highest security standards.",
        "sectionsMenu": {
            "step1": "Settled Transactions",
            "step2": "Settled Transactions Table",
            "step3": "Transaction Table Columns"
        },
        "alts": {
            "kpi": "Settled transactions overview with KPIs for totals and values",
            "search": "Search controls for filtering transactions",
            "filter": "Filter dropdowns and date pickers",
            "columns": "Transaction table columns overview"
        },
        "settled": {
            "title": "Settled Transactions",
            "desc": "This summary shows the finalized card payments that have been settled to your account for the selected date range and filters. It helps you quickly understand volume and value without opening the full table.",
            "kpis": {
                "totalTx": "Total Transactions: Count of card payments that reached final settlement within the selected period. Pending, declined, or voided payments are not included.",
                "success": "Success Transactions: Number of settled payments with a final status of Success (authorized, captured, and settled).",
                "totalUsd": "Total Value in USD: Sum of settled card payments shown in USD. For multi-currency settlements, amounts are displayed in USD according to the settlement currency configuration.",
                "totalLkr": "Total Value in LKR: Sum of the same settled card payments shown in LKR for local reporting."
            },
            "notesTitle": "Notes",
            "notes": {
                "n1": "The metrics respect your current filters (date range, store, payment method, etc.).",
                "n2": "Values show the settled amount (captured & settled), not the originally authorized amount.",
                "n3": "Pending, declined, or voided payments are excluded from these totals.",
                "n4": "Amounts are displayed in both USD and LKR and rounded to two decimals."
            }
        },
        "table": {
            "title": "Settled Transactions Table",
            "searchTitle": "Search Option",
            "filterTitle": "Filter Option"
        },
        "columns": {
            "title": "Transaction Table Columns",
            "labels": {
                "date": "Date",
                "id": "Transaction ID",
                "store": "Store Name",
                "currency": "Currency",
                "value": "Value",
                "status": "Status",
                "actions": "Actions"
            },
            "items": {
                "date": "Date and time when the transaction occurred.",
                "id": "Unique identifier assigned to each transaction.",
                "store": "Name of the merchant store where the transaction was made.",
                "currency": "The currency in which the transaction was processed.",
                "value": "Transaction amount.",
                "statusDesc": "Current transaction status â",
                "actions": "Options for further actions, such as viewing more details."
            },
            "statusBadges": {
                "success": "Success",
                "refunded": "Refunded",
                "voided": "Voided"
            },
            "statusHints": {
                "completed": "(payment completed)",
                "returned": "(amount returned to customer)",
                "canceled": "(canceled before settlement)"
            }
        }
    },
    "troubleshootings": {
        "title": "Troubleshooting",
        "intro": "This guide provides solutions to common issues faced by Merchants and Store Users in SriPay.",
        "sectionsMenu": {
            "merchant": "Merchant Issues",
            "storeUser": "Store User Issues"
        },
        "labels": {
            "issue": "Issue",
            "solution": "Solution"
        },
        "merchantIssues": {
            "title": "Merchant Issues",
            "items": [
                {
                    "issue": "OTP not received during store user assignment",
                    "solution": "Ask the user to check their spam/junk folder. Make sure a valid email address was entered."
                },
                {
                    "issue": "Cannot assign store user",
                    "solution": "Ensure all fields (Full Name, Email, Password) are filled and the email is unique."
                },
                {
                    "issue": "Merchant registration stuck on \"Waiting for Approval\"",
                    "solution": "This is normal. Wait until the Acquirer approves the request. No user action is required."
                },
                {
                    "issue": "Media uploading error in Gallery",
                    "solution": "Ensure the uploaded media file is at least 10MB in size. Files smaller than 10MB may not be accepted."
                }
            ]
        },
        "storeUserIssues": {
            "title": "Store User Issues",
            "items": [
                {
                    "issue": "Email verification failed",
                    "solution": "Resend the OTP from the merchant dashboard. Ensure the user enters the correct OTP within the time limit."
                },
                {
                    "issue": "Login not working",
                    "solution": "Make sure the account is verified and active. Try resetting the password if necessary."
                }
            ]
        }
    },
    "supports": {
        "title": "Support Information",
        "banner": "If you need assistance, please contact the SriPay Merchant Support Team:",
        "sectionsMenu": {
            "email": "Email",
            "website": "Website",
            "mobile": "Mobile"
        },
        "alts": {
            "emailLogo": "Email icon",
            "websiteLogo": "SriPay logo",
            "callLogo": "Phone icon"
        },
        "email": {
            "title": "Email",
            "blurb": "Contact the specific business or technical support team relevant to your needs, and we will get back to you within 1 business day:",
            "groupTitle": "SriPay Merchant support",
            "labels": {
                "address": "Email",
                "hours": "Working hours"
            },
            "items": {
                "addressValue": "admin@sripay.lk",
                "hoursValue": "24 hours, MondayâSunday, UTC+8"
            }
        },
        "website": {
            "title": "Website",
            "blurb": "Visit our official website for more details, documentation, and the latest updates about our services.",
            "groupTitle": "SriPay Merchant support",
            "labels": {
                "weblink": "Web Link"
            },
            "items": {
                "linkHref": "https://www.sripay.lk",
                "linkText": "www.sripay.lk"
            }
        },
        "mobile": {
            "title": "Mobile",
            "blurb": "Reach out directly via phone for immediate assistance with merchant handling or technical support.",
            "merchantGroupTitle": "SriPay Merchant support",
            "technicalGroupTitle": "SriPay Merchant Technical support",
            "labels": {
                "mobile": "Mobile",
                "hours": "Working hours"
            },
            "merchant": {
                "phone": "+94 76 703 5500 (Ms. Nishadi)",
                "hoursValue": "24 hours, MondayâSunday, UTC+8"
            },
            "technical": {
                "phone": "+94 76 664 1614 (Mr. Rusith)",
                "hoursValue": "24 hours, MondayâSunday, UTC+8"
            }
        }
    },
    "faqs": {
        "title": "Frequently Asked Questions",
        "alts": {
            "illustration": "FAQ Illustration"
        },
        "q1": {
            "q": "Can I edit a merchantâs KYC after submission?",
            "a": "No. Once submitted, edits cannot be made. You must reject the submission and ask the merchant to re-register."
        },
        "q2": {
            "q": "What types of businesses are supported?",
            "a": "SriPay supports Sole Proprietorships, Partnerships, Private and Public Limited Companies across a wide range of industries."
        },
        "q3": {
            "q": "Can I use my own Merchant ID?",
            "a": "Yes. If your custom Merchant ID is available, the system will validate and accept it."
        },
        "q4": {
            "q": "What happens after I approve a merchant?",
            "a": "The request is forwarded to SriPay for second-level review, then to Alipay for final evaluation. You will be notified at each stage."
        },
        "q5": {
            "q": "What if two merchants have the same email?",
            "a": "Duplicate emails are not allowed. Each merchant must register with a unique email address."
        }
    },
    "devgettingstart": {
        "title": "What is SriPay Developer Documentation?",
        "p1": "SriPay Developer Documentation is a comprehensive guide designed to help developers integrate and utilize SriPay's payment solutions effectively. It provides detailed information on API endpoints, authentication methods, and best practices for building applications with SriPay.",
        "p2": "SriPay Connect is built on a modern tech stack including React.js with Tailwind CSS and Ant Design for the frontend, Express.js with clustering for the backend, and Google Cloud Platform infrastructure. The system utilizes Firestore for structured data storage and Realtime Database for live transaction updates, ensuring optimal performance and scalability.",
        "p3": "Our platform provides comprehensive merchant management, store management, transaction processing, settlement handling, and detailed reporting capabilities. Security is paramount with JWT/OAuth 2.0 authentication, AES-256-CBC encryption, RSA2-signed communications with Alipay+, and full PCI DSS compliance through tokenization.",
        "p4": "The documentation covers system architecture, mobile Flutter applications with Firebase Cloud Messaging, RESTful API endpoints, third-party integrations including SMS gateways and Google Analytics, deployment on GCP Cloud Run, and comprehensive maintenance and support procedures with a 99.9% uptime SLA and tiered L1âL3 support.",
        "p5_prefix": "Access detailed technical specifications, integration guides, and developer resources at",
        "p5_link_text": "docs.sripay.lk",
        "p5_suffix": "to get started with SriPay Connect integration."
    },
    "systemintro": {
        "title": "Introduction",
        "p1": "SriPay Connect is a cloud-based payment Enterprise Resource Planning (ERP) application designed to facilitate seamless international and local digital payments through Alipay+ (online and offline) for merchants, bridging global customers with businesses in Sri Lanka and beyond. This System Architecture Report is prepared for banking partners to provide a comprehensive overview of SriPay Connect technical architecture, security measures, integration capabilities, and operational resilience to support secure and scalable payment processing.",
        "p2": "SriPay Connect serves a diverse audience, including merchants, financial institutions, and payment service providers, offering robust features such as merchant management, store management, transaction management, settlement, and detailed transaction reporting. Built with modern technologies and hosted on a secure cloud infrastructure, the application ensures high availability, compliance, and customization to meet branding requirements.",
        "p3": "This document outlines the systems architecture, detailing frontend and backend components, database design, security protocols, API integrations, compliance, and ensuring transparency and confidence for banking partners seeking integration."
    },
    "systemarch": {
        "title": "System Architecture Overview",
        "sectionsMenu": {
            "overview": "Overview",
            "diagram": "System Diagram",
            "components": "Component Descriptions"
        },
        "p1": "SriPay Connect is engineered as a cloud-native, modular platform that combines a microservices-driven backend, a responsive web/mobile frontend, and hardened database infrastructure. It natively integrates Alipay+ for both online and offline payments, while plug-in connectors handle notifications, analytics, and other third-party services. Open, RESTful APIs ensure effortless extensibility across partners.",
        "p2": "Security and observability are woven throughout the stack: JWT/OAuth 2.0 for auth, AES-256-CBC secrets managed via GCP KMS, RSA2-signed calls to Alipay+, plus centralised logging and distributed tracing for end-to-end visibility and rapid incident response.",
        "alts": {
            "diagram": "System Architecture Overview Diagram"
        },
        "components": {
            "title": "Component Descriptions",
            "items": {
                "webApp": "Web Application: Built with React.js, Tailwind CSS, and Ant Design (AntD) for a responsive, customizable user interface supporting merchant and store management, transaction reporting, settlement and different user roles.",
                "mobileApp": "Mobile Application: Built with Flutter (Dart) using Material 3, integrates Firebase Cloud Messaging for push alerts, and delivers merchant & store management, transaction reporting, settlement, and role-based access all in one cross-platform app.",
                "backend": "Back-End Server: Powered by Express.js with clustering for scalability, handling business logic, API orchestration, and integrations.",
                "database": "Database: Firestore for structured data and Realtime Database for realtime transaction updates, with daily JSON backups for recovery.",
                "notification": "Notification Server: Node.js Express server hosted on GCP, handling SMS and email notifications.",
                "openSeaApi": "Open Sea API Server: Built on Express.js with clustering for high performance and scalability, responsible for executing core business logic, orchestrating APIs, and managing integrations with external services.",
                "security": "Security Layer: JWT and OAuth for secure authentication, along with AES encryption and tokenization to protect sensitive data, ensuring confidentiality, integrity, and compliance with industry security standards.",
                "backupDb": "Backup DB: A separate Firestore database dedicated to storing JSON backups, ensuring data redundancy, disaster recovery readiness, and long-term archival of critical information."
            }
        }
    },
    "webarch": {
        "title": "Web Application Architecture",
        "p1": "The frontend of SriPay Connect is a web application developed using React.js, styled with Tailwind CSS for utility-first styling, and enhanced with Ant Design (AntD) for consistent, enterprise-grade UI components. The architecture emphasizes modularity, performance, and customization to support branding requirements.",
        "alts": {
            "diagram": "Web App Architecture"
        },
        "features": {
            "framework": {
                "label": "Framework",
                "desc": "React.js for component-based development, enabling reusable UI elements."
            },
            "styling": {
                "label": "Styling",
                "desc": "Tailwind CSS for rapid, responsive design. AntD for pre-built components like tables, forms, and modals."
            },
            "state": {
                "label": "State Management",
                "desc": "React Context API and Redux for managing application state, ensuring seamless updates for transaction and merchant data."
            },
            "routing": {
                "label": "Routing",
                "desc": "React Router for navigation across modules (e.g., Merchant Management, Transaction Reports)."
            },
            "customization": {
                "label": "Customization",
                "desc": "Supports white-labeling, allowing merchants to customize UI elements (logos, colors, themes) while retaining âPowered by SriPayâ branding."
            },
            "performance": {
                "label": "Performance",
                "desc": "Lazy loading, code splitting, and optimized asset delivery via Webpack."
            },
            "accessibility": {
                "label": "Accessibility",
                "desc": "Adheres to WCAG 2.1 standards for inclusive access."
            }
        }
    },
    "mobilearch": {
        "title": "Mobile Application Architecture",
        "p1": "The mobile application for SriPay Connect is developed using Flutter to deliver a cross-platform, high-performance experience on both iOS and Android. It leverages Firebase Cloud Messaging (FCM) for real-time push notifications, and integrates with SriPayâs backend APIs for seamless data synchronization. The architecture focuses on modularity, responsiveness, and security to ensure a consistent user experience across devices.",
        "features": {
            "framework": {
                "label": "Framework",
                "desc": "Flutter for cross-platform development, enabling a single codebase for iOS and Android while maintaining native-like performance."
            },
            "styling": {
                "label": "Styling",
                "desc": "Flutterâs widget-based UI system for customizable, responsive layouts; supports theming for branding consistency."
            },
            "state": {
                "label": "State Management",
                "desc": "Provider and Riverpod/Bloc for structured state handling, ensuring smooth data flow and real-time UI updates."
            },
            "routing": {
                "label": "Routing",
                "desc": "Flutterâs Navigator 2.0 for structured, declarative navigation across features."
            },
            "notifications": {
                "label": "Notifications",
                "desc": "Firebase Cloud Messaging (FCM) for real-time push notifications on transactions, settlements, and account updates."
            },
            "performance": {
                "label": "Performance",
                "desc": "Optimized rendering, minimal widget rebuilds, and asset preloading for a smooth user experience."
            },
            "security": {
                "label": "Security",
                "desc": "Secure storage for sensitive data, HTTPS for API communication, and token-based authentication (JWT/OAuth)."
            }
        }
    },
    "backendarch": {
        "title": "Backend Architecture",
        "p1": "The backend is built with Express.js, a lightweight Node.js framework, configured with clustering to utilize multi-core systems for high throughput. It follows a microservices-inspired design, with modular services for transaction processing, merchant management, and third-party integrations.",
        "alts": {
            "diagram": "Backend Architecture Diagram"
        },
        "features": {
            "framework": {
                "label": "Framework",
                "desc": "Express.js for RESTful API development, with middleware for logging, error handling, and rate limiting."
            },
            "clustering": {
                "label": "Clustering",
                "desc": "Node.js Cluster module to distribute workloads across CPU cores, ensuring scalability and improved performance."
            },
            "api": {
                "label": "API Design",
                "desc": "RESTful endpoints with JSON payloads, documented via OpenAPI/Swagger for clarity and developer adoption."
            },
            "integration": {
                "label": "Integration Layer",
                "desc": "Dedicated service modules for Alipay+ online/offline payment processing and Google Analytics tracking."
            },
            "error": {
                "label": "Error Handling",
                "desc": "Centralized error management with custom error codes, structured responses, and integrated logging for monitoring and troubleshooting."
            },
            "scalability": {
                "label": "Scalability",
                "desc": "Supports horizontal scaling via containerization (Docker) and orchestration (Kubernetes)."
            },
            "monitoring": {
                "label": "Monitoring",
                "desc": "Integrated with logging frameworks (GCP Log) and performance monitoring tools for proactive system health tracking."
            }
        }
    },
    "databasearch": {
        "title": "Database Architecture",
        "p1": "SriPay Connect uses Google Cloud Firestore for structured data storage, Realtime Database for live transaction updates, and daily JSON backups for data redundancy.",
        "alts": {
            "diagram": "Database Architecture Diagram"
        },
        "features": {
            "collections": {
                "label": "Collections",
                "desc": "Merchants, Stores, Transactions, Settlements, etc."
            },
            "schema": {
                "label": "Schema",
                "desc": "Hierarchical structure with documents for merchant profiles, store details, transaction records, and settlement logs."
            },
            "indexing": {
                "label": "Indexing",
                "desc": "Composite indexes for frequent queries (e.g., transaction status, date ranges). Stores transient data for real-time transaction updates, synchronized with Firestore. Supports live dashboards and instant notifications."
            },
            "backup": {
                "label": "JSON Backup",
                "desc": "Daily exports from Firestore to another Firestore database for archival and disaster recovery. Backup schema mirrors primary Firestore collections with normalized structures."
            },
            "integrity": {
                "label": "Data Integrity",
                "desc": "Firestore triggers and validation rules enforce consistency and prevent invalid data entry."
            },
            "performance": {
                "label": "Performance",
                "desc": "Optimized queries, composite indexing, and caching strategies ensure fast reads in high-traffic scenarios."
            }
        }
    },
    "auth": {
        "title": "Authentication and Authorization",
        "p1": "SriPay Connect implements strong authentication and authorization measures to ensure secure access and protect sensitive user data. All requests to backend APIs are token-based and validated before processing.",
        "alts": {
            "diagram": "Auth Service Architecture Diagram"
        },
        "sectionsMenu": {
            "authentication": "Authentication",
            "authorization": "Authorization",
            "session": "Session Management",
            "best": "Security Best Practices"
        },
        "authentication": {
            "items": {
                "jwt": {
                    "label": "JWT (JSON Web Tokens)",
                    "desc": "Stateless session management with tokens signed using RSA256 for strong cryptographic security."
                },
                "oauth": {
                    "label": "OAuth 2.0",
                    "desc": "Supports third-party authentication (e.g., Google, Alipay) for merchants and admins."
                },
                "tokenization": {
                    "label": "Tokenization",
                    "desc": "Sensitive exchanges use tokenized payloads to avoid direct exposure of confidential data."
                },
                "tokenValidity": {
                    "label": "Token Validity",
                    "points": {
                        "access": "Access tokens have a maximum lifetime of 1 hour.",
                        "refresh": "Refresh tokens provide longer validity and are stored securely to renew sessions without re-authentication."
                    }
                },
                "aes": {
                    "label": "AES-256 Encryption",
                    "desc": "Stored and transmitted sensitive data is encrypted with AES-256-CBC."
                }
            }
        },
        "authorization": {
            "items": {
                "rbac": {
                    "label": "Role-Based Access Control (RBAC)",
                    "desc": "Roles include Admin, Merchant, Store Manager, and Viewer."
                },
                "policy": {
                    "label": "Policy Enforcement",
                    "desc": "Express.js middleware checks JWT claims to validate role permissions before granting access to protected routes."
                }
            }
        },
        "session": {
            "items": {
                "short": "Short-lived access tokens (1 hour max) with refresh tokens for continuity.",
                "storage": "Secure HTTPS-only cookies or encrypted local storage for token storage.",
                "invalidate": "Automatic token invalidation on logout, password change, or account deactivation."
            }
        },
        "best": {
            "items": {
                "requireJwt": "All API endpoints require valid JWT authentication.",
                "httpsOnly": "Tokens are transmitted only over HTTPS.",
                "monitoring": "Middleware logs and monitors failed authentication attempts for anomaly detection.",
                "rateLimit": "Rate limiting and IP throttling mitigate brute-force or token-abuse attempts."
            }
        }
    },
    "encsec": {
        "title": "Encryption and Security",
        "p1": "SriPay Connect prioritizes data security by implementing industry-standard encryption, secure communication protocols, and multi-layered protection mechanisms.",
        "alts": {
            "diagram": "Encryption and Security Diagram"
        },
        "sectionsMenu": {
            "transit": "Data in Transit",
            "atRest": "Data at Rest",
            "token": "Tokenization",
            "audits": "Security Audits & Monitoring",
            "network": "Network & Application Protection"
        },
        "transit": {
            "items": {
                "https": "All communications use HTTPS with TLS 1.3 for maximum security and forward secrecy.",
                "rsa": "RSA256 for digital signatures and asymmetric encryption.",
                "hash": "SHA-256 and MD5 (where legacy compatibility is required) for hashing and integrity checks."
            }
        },
        "atRest": {
            "items": {
                "aes": "AES-256-CBC encryption for sensitive fields stored in Firestore databases.",
                "gcp": "Google Cloudâs default encryption for Firestore and Realtime Database.",
                "backup": "Encrypted backups for Firestore archives."
            }
        },
        "token": {
            "items": {
                "scope": "Sensitive payment data is tokenized using Alipay+ APIs, minimizing PCI DSS compliance scope.",
                "store": "Tokenized values are stored instead of raw payment data, reducing risk in the event of a breach."
            }
        },
        "audits": {
            "items": {
                "pentest": "Regular penetration testing and vulnerability scanning to detect and fix weaknesses.",
                "logging": "Centralized logging and monitoring for detecting suspicious activity."
            }
        },
        "network": {
            "items": {
                "waf": "Web Application Firewall (WAF) to block DDoS attacks, SQL injection, and cross-site scripting (XSS).",
                "allow": "IP allowlisting and geofencing for sensitive admin endpoints.",
                "ratelimit": "Rate limiting to prevent abuse of public APIs."
            }
        }
    },
    "apisec": {
        "title": "API Security",
        "p1": "SriPay Connectâs RESTful APIs are protected with multi-layered security measures to prevent unauthorized access, safeguard sensitive data, and maintain system integrity.",
        "alts": {
            "diagram": "API Security Diagram"
        },
        "sectionsMenu": {
            "auth": "Authentication & Authorization",
            "rate": "Rate Limiting & Abuse Prevention",
            "cors": "CORS & Domain Restrictions",
            "input": "Input Validation & Sanitization",
            "gateway": "API Gateway & Monitoring",
            "logging": "Logging & Audit Trails"
        },
        "auth": {
            "items": {
                "require": "All API endpoints require JWT and Access Key tokens for access.",
                "claims": "Token claims are validated via Express.js middleware before processing requests."
            }
        },
        "rate": {
            "items": {
                "limit": "Rate limiting implemented with Express.js middleware to control request frequency and mitigate abuse.",
                "throttle": "IP throttling for repeated failed authentication attempts."
            }
        },
        "cors": {
            "items": {
                "strict": "Strict Cross-Origin Resource Sharing (CORS) rules to allow access only from trusted domains.",
                "preflight": "Preflight checks enforce origin, method, and header restrictions."
            }
        },
        "input": {
            "items": {
                "validate": "All incoming data is validated and sanitized using libraries like Joi to prevent injection attacks.",
                "protect": "Protection against SQL injection, XSS, and malformed JSON payloads."
            }
        },
        "gateway": {
            "items": {
                "gcp": "Google Cloud API Gateway for additional security, traffic routing, and monitoring.",
                "monitor": "Integration with Google Cloud Monitoring & Logging for real-time tracking of API activity."
            }
        },
        "logging": {
            "items": {
                "audit": "All API requests logged for auditing and debugging, with sensitive data excluded from logs.",
                "retain": "Logs retained per compliance requirements for forensic analysis."
            }
        }
    },
    "deployinfra": {
        "title": "Deployment & Infrastructure",
        "p1": "SriPay Connect is deployed on a multi-cloud architecture primarily leveraging Google Cloud Platform (GCP) with a separate server for notifications, ensuring high availability, scalability, and redundancy.",
        "alts": {
            "diagram": "Deployment & Infrastructure Diagram"
        },
        "sectionsMenu": {
            "hosting": "Hosting & Compute",
            "notify": "Notification Services",
            "backup": "Backup & Disaster Recovery",
            "scaling": "Scaling & Performance Optimization",
            "monitoring": "Monitoring & Alerts"
        },
        "hosting": {
            "items": {
                "cloudrun": "GCP Cloud Run for containerized Express.js backend services, enabling serverless scaling and efficient resource utilization.",
                "hosting": "GCP Firebase Hosting for serving static React.js frontend assets with global CDN delivery.",
                "firestore": "Firestore and Realtime Database hosted in us-central1 for low-latency access."
            }
        },
        "notify": {
            "items": {
                "separate": "Separate server for high-throughput SMS and email notifications.",
                "integrated": "Integrated with backend services for transactional and alert messages."
            }
        },
        "backup": {
            "items": {
                "compute": "GCP Compute Engine instances for scheduled SQL backups and recovery operations.",
                "daily": "Daily Firestore and Realtime Database backups to secondary GCP regions for redundancy."
            }
        },
        "scaling": {
            "items": {
                "autoscale": "Auto-scaling policies for Cloud Run triggered by CPU and memory utilization thresholds.",
                "coldstart": "Optimized cold start performance for backend services."
            }
        },
        "monitoring": {
            "items": {
                "gcpmon": "Google Cloud Monitoring for real-time performance tracking and uptime checks.",
                "alerts": "Automated alerts for anomalies, latency spikes, or failed deployments."
            }
        }
    },
    "thirdparty": {
        "title": "Third-Party Integrations",
        "p1": "SriPay Connect leverages trusted third-party services to extend its capabilities and deliver a seamless payment and management experience.",
        "sectionsMenu": {
            "alipay": "Alipay+",
            "sms": "SMS Gateway",
            "ga": "Google Analytics"
        },
        "alipay": {
            "items": {
                "support": "Supports online and offline payment methods, including QR code scanning and mobile wallet transactions.",
                "integrated": "Fully integrated via Alipay+ SDKs and APIs for secure transaction processing, settlement, and reconciliation."
            }
        },
        "sms": {
            "items": {
                "powers": "Powers transaction alerts, multi-factor authentication (MFA), and critical merchant communications.",
                "templates": "Supports configurable notification templates for branding and personalized messaging."
            }
        },
        "ga": {
            "items": {
                "tracks": "Tracks user interactions, transaction funnels, and merchant engagement metrics.",
                "gtm": "Integrated via Google Tag Manager for advanced frontend analytics and event tracking."
            }
        }
    },
    "compliance": {
        "title": "Compliance and Privacy",
        "p1": "SriPay Connect adheres to global and local regulations to ensure compliance, protect user privacy, and maintain trust with merchants and customers.",
        "items": {
            "pci": "PCI DSS: Fully compliant with Level 1 payment processing requirements, leveraging Alipay+ tokenization to minimize PCI scope.",
            "gdpr": "GDPR: Complies with the EU General Data Protection Regulation, including data minimization, explicit user consent, and right-to-erasure practices.",
            "local": "Local Regulations: Meets Sri Lankan financial regulations and Central Bank of Sri Lanka guidelines for payment service providers.",
            "privacy": "Privacy Policy: Transparent policies outlining data collection, usage, retention, and sharing practices.",
            "terms": "Terms & Conditions: Clearly defines service usage rules, merchant obligations, and dispute resolution procedures.",
            "audits": "Audits: Regular third-party compliance audits to verify adherence to regulatory and security standards."
        },
        "links": {
            "privacyHref": "https://sripay.lk/privacy-policy",
            "privacyLabel": "View Privacy Policy",
            "termsHref": "https://sripay.lk/terms-conditions",
            "termsLabel": "View Terms & Conditions"
        }
    },
    "maintenance": {
        "title": "Maintenance and Support",
        "p1": "SriPay Connect provides comprehensive maintenance and support services to ensure system stability, optimal performance, and uninterrupted payment operations.",
        "items": {
            "updates": "Updates: Continuous delivery of security patches, bug fixes, and feature enhancements via the CI/CD pipeline.",
            "monitoring": "Monitoring: 24/7 real-time monitoring with automated alerts for performance anomalies, security events, and service degradation.",
            "support": "Support: Tiered support model (L1âL3) available via email and phone for issue tracking and resolution.",
            "sla": "Service Level Agreement (SLA): 99.9% uptime guarantee with 2-hour response times for critical priority issues.",
            "docs": "Documentation: Comprehensive user guides, API documentation, and administrative manuals for merchants, admins, and developers."
        },
        "links": {
            "docsHref": "https://docs.sripay.lk/",
            "docsLabel": "docs.sripay.lk"
        }
    },
    "acqApi": {
        "title": "Acquirer API Overview",
        "p1": "The Acquirer API, powered by SriPay and integrated with Alipay+, provides a secure and robust solution for merchants to process payments, manage accounts, and handle transactions programmatically. This API supports various payment methods, including online payments, merchant-presented mode payments (dynamic QR codes), user-presented mode payments, payment voids, and refunds. Designed for simplicity and security, the API ensures consistent request handling through common headers and strict validation.",
        "p2": "This documentation outlines the API's endpoints, request structures, workflows, and error scenarios, with examples to facilitate integration.",
        "sections": {
            "overview": "Overview",
            "requestStructure": "API Request Structure",
            "urlFormat": "Request URL Format",
            "method": "Request Method",
            "headers": "Request Headers",
            "responseBody": "Response Body",
            "responseCodes": "Response Codes"
        },
        "structureList": {
            "urlFormat": "Request URL Format",
            "method": "Request Method",
            "headers": "Request Headers",
            "headersAuthKey": "Authorization Key",
            "headersAcquirerId": "Acquirer Id",
            "headersAuth": "Auth Key",
            "headersContentType": "Content-Type",
            "responseBody": "Response Body",
            "responseCodes": "Response Code"
        },
        "url": {
            "intro": "The SriPay Connect ACQ API follows a structured request URL format, which is composed of two distinct parts",
            "pattern": "https://{Host}/{Endpoint}",
            "bulletHost": "Host â The base URL of the SriPay Connect ACQ API environment you are connecting to.",
            "bulletEndpoint": "Endpoint â The specific API path that defines the service or operation being requested.",
            "exampleTitle": "Example",
            "exampleHost": "Host:",
            "exampleEndpoint": "Endpoint:",
            "completeTitle": "Complete Request URL"
        },
        "method": {
            "intro": "SriPay Connect ACQ APIs support only two HTTPS request methods",
            "postTitle": "POST",
            "postDesc": "Used for creating or submitting new data to the server.",
            "postExample": "Example: Initiating a payment, creating a transaction, sending a request for processing.",
            "getTitle": "GET",
            "getDesc": "Used for retrieving data from the server.",
            "getExample": "Example: Fetching transaction details, retrieving status updates, or querying records."
        },
        "headers": {
            "intro": "All SriPay Connect ACQ API requests must include the following headers to ensure proper authentication and routing:",
            "table": {
                "colName": "Header Name",
                "colDesc": "Description",
                "colExample": "Example",
                "authorizationName": "Authorization or x-api-key",
                "authorizationDesc": "API key used for authenticating requests.",
                "authorizationEx": "Bearer\\neyJhbGciOiJIUzI1NiIs..",
                "authKeyName": "AuthKey or x-auth-key",
                "authKeyDesc": "Additional authentication key for enhanced security validation.",
                "authKeyEx": "Bearer\\nabc123securetoken",
                "acquirerIdName": "AcquirerId or x-acq-id",
                "acquirerIdDesc": "Unique identifier assigned to each acquirer for request routing and access control.",
                "acquirerIdEx": "ndklkldmkedewswmmx",
                "contentTypeName": "Content-Type",
                "contentTypeDesc": "Defines the format of the request body. Always use application/json.",
                "contentTypeEx": "application/json"
            },
            "stepsTitle": "Steps to retrieve your keys:",
            "step1": "Go to your profile.",
            "step2": "Scroll to the bottom.",
            "step3": "Verify using your password.",
            "step4": "Retrieve your keys."
        },
        "respBody": {
            "intro": "All API responses include a Result object containing three key fields",
            "code": "Code â A short, machine readable identifier that indicates the outcome of the request. This is used primarily for programmatic handling.",
            "message": "Message â A human readable description providing additional details about the result. This is suitable for user-facing error messages and logging.",
            "status": "Status â The business level outcome category of the request or transaction. This helps track workflow states such as approval, rejection, or pending processing."
        },
        "respCodes": {
            "intro": "SriPay Connect ACQ APIs return standard HTTP status codes along with the response body to indicate the result of the request at the protocol level.",
            "table": {
                "colCode": "Code",
                "colName": "Name",
                "colDesc": "Description",
                "colTypical": "Typical Use",
                "200_name": "OK",
                "200_desc": "The request was successful and the server returned the expected data.",
                "200_typ": "Successful API request.",
                "201_name": "Created",
                "201_desc": "The request was successful and a new resource was created.",
                "201_typ": "Payment created, transaction initiated.",
                "202_name": "Accepted",
                "202_desc": "The request has been accepted for processing, but the operation is not yet complete.",
                "202_typ": "Asynchronous operations, queued requests.",
                "204_name": "No Content",
                "204_desc": "The request was successful but there is no content to return.",
                "204_typ": "Delete operations, empty successful responses.",
                "400_name": "Bad Request",
                "400_desc": "The request was malformed or missing required parameters.",
                "400_typ": "Validation errors, missing fields.",
                "401_name": "Unauthorized",
                "401_desc": "Authentication failed or API key is missing/invalid.",
                "401_typ": "Missing/invalid Authorization header.",
                "403_name": "Forbidden",
                "403_desc": "The authenticated user does not have permission to perform this action.",
                "403_typ": "Role-based access restrictions.",
                "404_name": "Not Found",
                "404_desc": "The requested resource could not be found.",
                "404_typ": "Invalid endpoint or resource ID.",
                "409_name": "Conflict",
                "409_desc": "The request could not be completed due to a conflict with the current state of the resource.",
                "409_typ": "Duplicate transactions, conflicting updates.",
                "500_name": "Internal Server Error",
                "500_desc": "An unexpected server error occurred.",
                "500_typ": "Any unhandled backend error."
            }
        }
    },
    "acqEndpoints": {
        "title": "Endpoints",
        "intro": "SriPay Connect provides the following API endpoints, enabling acquirers to seamlessly integrate with their Web, POS systems or other payment platforms.",
        "sections": {
            "instore": "Alipay+ In-store API",
            "online": "Alipay+ Online API"
        },
        "instore": {
            "title": "Alipay+ In-store API",
            "desc": "Facilitates secure, real-time payment initiation, processing, and status tracking for in-store transactions using Alipay+ QR technology. These APIs enable merchants to accept payments by scanning customer-presented codes or generating merchant-issued QR codes, while providing reliable mechanisms to query and monitor transaction outcomes.",
            "items": {
                "orderCodePayQr": "Order Code Pay QR",
                "orderCodeResultListener": "Order Code Result Listener",
                "userPresentPay": "User Present Pay",
                "userPresentPayWaiting": "User Present Pay Waiting",
                "instorePaymentInquiry": "In-store Payment Inquiry"
            }
        },
        "online": {
            "title": "Alipay+ Online API",
            "desc": "Alipay+ Online API is a lightweight REST interface that plugs your website or any internet-facing app straight into the global Alipay+ wallet network. With a single endpoint you spin up a secure, branded payment link, redirect the buyer to Alipay+ checkout, and then get real-time callbacks for payment status, refunds, and settlement data with no additional gateway layers or region-specific code needed.",
            "items": {
                "paymentLinkCreate": "Payment Link Create",
                "paymentInquiry": "Payment Inquiry"
            }
        }
    },
    "common": {
        "copy": "Copy",
        "copied": "Copied!"
    },
    "orderCodePayQr": {
        "sections": {
            "title": "Order Code Pay QR",
            "endpoint": "Endpoint",
            "headers": "Headers",
            "requestBody": "Request Body",
            "sampleRequest": "Sample Request",
            "successResponse": "Success Response",
            "errorResponses": "Error Responses"
        },
        "methodBadge": "POST",
        "endpointPath": "/v2/alipayplus/instore/ordercode-pay",
        "lede1": "The Order Code Pay option allows the merchant to generate a dynamic QR code and display it to the customer for payment. The merchant then receives the payment result in real time. The following API specifies the criteria required to initiate the request.",
        "lede2": "This endpoint generates a QR code for Alipay+ offline transactions by creating an order with the provided acquirer, outlet, and terminal details, tailored for acquirer-specific integrations.",
        "endpoint": {
            "title": "Endpoint",
            "urlLabel": "URL",
            "methodLabel": "Method",
            "descLabel": "Description",
            "desc": "Initiates an Alipay+ offline transaction by generating a QR code for payment, validated against acquirer credentials."
        },
        "headers": {
            "title": "Headers",
            "acqId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
            "authorization": "Authorization (string, required): The authorization key for the acquirer.",
            "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
            "contentType": "Content-Type (string, required): Must be application/json."
        },
        "requestBody": {
            "title": "Request Body",
            "intro": "The request body must be in JSON format and include the following parameters",
            "table": {
                "parameter": "Parameter",
                "type": "Type",
                "required": "Required",
                "description": "Description",
                "validation": "Validation Rules",
                "yes": "Yes"
            },
            "rows": {
                "outletId": {
                    "description": "Unique identifier of the outlet.",
                    "validation": "Must be a non-empty string."
                },
                "amount": {
                    "description": "Transaction amount.",
                    "validation": "Must be a positive number greater than 0."
                },
                "subject": {
                    "description": "Description of the transaction.",
                    "validation": "Must be a string, max length 100 characters."
                },
                "currency": {
                    "description": "Currency of the transaction.",
                    "validation": "Must be either USD or LKR."
                },
                "terminalId": {
                    "description": "Unique identifier of the terminal.",
                    "validation": "Must be a non-empty string."
                }
            },
            "validationTitle": "Request Body Validation",
            "validationBullets": {
                "outletId": "outletId: Required, non-empty string.",
                "amount": "amount: Required, must be a positive number (greater than 0).",
                "subject": "subject: Required, string with a maximum length of 100 characters.",
                "currency": "currency: Required, must be one of USD or LKR.",
                "terminalId": "terminalId: Required, non-empty string."
            }
        },
        "sampleRequest": {
            "title": "Sample Request",
            "headersLabel": "Headers"
        },
        "successResponse": {
            "title": "Success Response",
            "statusCode": "Status Code",
            "contentType": "Content Type",
            "responseBody": "Response Body",
            "okLabel": "200 OK"
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "items": {
                "missingParams": "1. Missing Parameters",
                "invalidAmount": "2. Invalid Amount",
                "invalidCurrency": "3. Invalid Currency",
                "invalidSubject": "4. Invalid Subject",
                "outletNotFound": "5. Outlet Not Found",
                "acqOutletMismatch": "6. Acquirer-Outlet Mismatch",
                "outletNotApproved": "7. Outlet Not Approved",
                "outletNotApprovedOffline": "8. Outlet Not Approved for Alipay+ Offline",
                "terminalNotApproved": "9. Terminal Not Approved",
                "outletMissingMerchant": "10. Outlet Missing Merchant",
                "merchantNotFound": "11. Merchant Not Found",
                "acqMerchantMismatch": "12. Acquirer-Merchant Mismatch",
                "alipayUnreachable": "13. Alipay+ Unreachable",
                "xmlParseError": "14. XML Parse Error",
                "alipayFailed": "15. Alipay+ Failed",
                "sripayQrError": "16. SriPay QR Error",
                "serverError": "17. Server Error"
            },
            "statusCode": "Status Code",
            "responseBody": "Response Body",
            "labels": {
                "badRequest": "400 Bad Request",
                "forbidden": "403 Forbidden",
                "notFound": "404 Not Found",
                "badGateway": "502 Bad Gateway",
                "internalError": "500 Internal Server Error"
            }
        }
    },
    "common": {
        "copy": "Copy",
        "copied": "Copied!"
    },
    "orderCodePayQr": {
        "sections": {
            "title": "Order Code Pay QR",
            "endpoint": "Endpoint",
            "headers": "Headers",
            "requestBody": "Request Body",
            "sampleRequest": "Sample Request",
            "successResponse": "Success Response",
            "errorResponses": "Error Responses"
        },
        "methodBadge": "POST",
        "endpointPath": "/v2/alipayplus/instore/ordercode-pay",
        "lede1": "The Order Code Pay option allows the merchant to generate a dynamic QR code and display it to the customer for payment. The merchant then receives the payment result in real time. The following API specifies the criteria required to initiate the request.",
        "lede2": "This endpoint generates a QR code for Alipay+ offline transactions by creating an order with the provided acquirer, outlet, and terminal details, tailored for acquirer-specific integrations.",
        "endpoint": {
            "title": "Endpoint",
            "urlLabel": "URL",
            "methodLabel": "Method",
            "descLabel": "Description",
            "desc": "Initiates an Alipay+ offline transaction by generating a QR code for payment, validated against acquirer credentials."
        },
        "headers": {
            "title": "Headers",
            "acqId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
            "authorization": "Authorization (string, required): The authorization key for the acquirer.",
            "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
            "contentType": "Content-Type (string, required): Must be application/json."
        },
        "requestBody": {
            "title": "Request Body",
            "intro": "The request body must be in JSON format and include the following parameters",
            "table": {
                "parameter": "Parameter",
                "type": "Type",
                "required": "Required",
                "description": "Description",
                "validation": "Validation Rules",
                "yes": "Yes"
            },
            "rows": {
                "outletId": {
                    "description": "Unique identifier of the outlet.",
                    "validation": "Must be a non-empty string."
                },
                "amount": {
                    "description": "Transaction amount.",
                    "validation": "Must be a positive number greater than 0."
                },
                "subject": {
                    "description": "Description of the transaction.",
                    "validation": "Must be a string, max length 100 characters."
                },
                "currency": {
                    "description": "Currency of the transaction.",
                    "validation": "Must be either USD or LKR."
                },
                "terminalId": {
                    "description": "Unique identifier of the terminal.",
                    "validation": "Must be a non-empty string."
                }
            },
            "validationTitle": "Request Body Validation",
            "validationBullets": {
                "outletId": "outletId: Required, non-empty string.",
                "amount": "amount: Required, must be a positive number (greater than 0).",
                "subject": "subject: Required, string with a maximum length of 100 characters.",
                "currency": "currency: Required, must be one of USD or LKR.",
                "terminalId": "terminalId: Required, non-empty string."
            }
        },
        "sampleRequest": {
            "title": "Sample Request",
            "headersLabel": "Headers"
        },
        "successResponse": {
            "title": "Success Response",
            "statusCode": "Status Code",
            "contentType": "Content Type",
            "responseBody": "Response Body",
            "okLabel": "200 OK"
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "items": {
                "missingParams": "1. Missing Parameters",
                "invalidAmount": "2. Invalid Amount",
                "invalidCurrency": "3. Invalid Currency",
                "invalidSubject": "4. Invalid Subject",
                "outletNotFound": "5. Outlet Not Found",
                "acqOutletMismatch": "6. Acquirer-Outlet Mismatch",
                "outletNotApproved": "7. Outlet Not Approved",
                "outletNotApprovedOffline": "8. Outlet Not Approved for Alipay+ Offline",
                "terminalNotApproved": "9. Terminal Not Approved",
                "outletMissingMerchant": "10. Outlet Missing Merchant",
                "merchantNotFound": "11. Merchant Not Found",
                "acqMerchantMismatch": "12. Acquirer-Merchant Mismatch",
                "alipayUnreachable": "13. Alipay+ Unreachable",
                "xmlParseError": "14. XML Parse Error",
                "alipayFailed": "15. Alipay+ Failed",
                "sripayQrError": "16. SriPay QR Error",
                "serverError": "17. Server Error"
            },
            "statusCode": "Status Code",
            "responseBody": "Response Body",
            "labels": {
                "badRequest": "400 Bad Request",
                "forbidden": "403 Forbidden",
                "notFound": "404 Not Found",
                "badGateway": "502 Bad Gateway",
                "internalError": "500 Internal Server Error"
            }
        }
    },
    "common": {
        "copy": "Copy",
        "copied": "Copied!"
    },
    "orderCodePayQr": {
        "menu": {
            "section1": "Order Code Pay QR",
            "section2": "Endpoint",
            "section3": "Request Header",
            "section4": "Request Body",
            "section5": "Sample Request",
            "section6": "Success Response",
            "section7": "Error Responses"
        },
        "title": "Order Code Pay QR",
        "methodBadge": "POST",
        "endpointPath": "/v2/alipayplus/instore/ordercode-pay",
        "lede1": "The Order Code Pay option allows the merchant to generate a dynamic QR code and display it to the customer for payment. The merchant then receives the payment result in real time. The following API specifies the criteria required to initiate the request.",
        "lede2": "This endpoint generates a QR code for Alipay+ offline transactions by creating an order with the provided acquirer, outlet, and terminal details, tailored for acquirer-specific integrations.",
        "endpoint": {
            "title": "Endpoint",
            "urlLabel": "URL",
            "methodLabel": "Method",
            "descLabel": "Description",
            "desc": "Initiates an Alipay+ offline transaction by generating a QR code for payment, validated against acquirer credentials."
        },
        "headers": {
            "title": "Headers",
            "acqId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
            "authorization": "Authorization (string, required): The authorization key for the acquirer.",
            "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
            "contentType": "Content-Type (string, required): Must be application/json."
        },
        "requestBody": {
            "title": "Request Body",
            "intro": "The request body must be in JSON format and include the following parameters",
            "table": {
                "parameter": "Parameter",
                "type": "Type",
                "required": "Required",
                "description": "Description",
                "validation": "Validation Rules",
                "yes": "Yes"
            },
            "rows": {
                "outletId": {
                    "description": "Unique identifier of the outlet.",
                    "validation": "Must be a non-empty string."
                },
                "amount": {
                    "description": "Transaction amount.",
                    "validation": "Must be a positive number greater than 0."
                },
                "subject": {
                    "description": "Description of the transaction.",
                    "validation": "Must be a string, max length 100 characters."
                },
                "currency": {
                    "description": "Currency of the transaction.",
                    "validation": "Must be either USD or LKR."
                },
                "terminalId": {
                    "description": "Unique identifier of the terminal.",
                    "validation": "Must be a non-empty string."
                }
            },
            "validationTitle": "Request Body Validation",
            "validationBullets": {
                "outletId": "outletId: Required, non-empty string.",
                "amount": "amount: Required, must be a positive number (greater than 0).",
                "subject": "subject: Required, string with a maximum length of 100 characters.",
                "currency": "currency: Required, must be one of USD or LKR.",
                "terminalId": "terminalId: Required, non-empty string."
            }
        },
        "sampleRequest": {
            "title": "Sample Request",
            "headersLabel": "Headers"
        },
        "successResponse": {
            "title": "Success Response",
            "statusCode": "Status Code",
            "contentType": "Content Type",
            "responseBody": "Response Body",
            "okLabel": "200 OK"
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "statusCode": "Status Code",
            "responseBody": "Response Body",
            "labels": {
                "badRequest": "400 Bad Request",
                "forbidden": "403 Forbidden",
                "notFound": "404 Not Found",
                "badGateway": "502 Bad Gateway",
                "internalError": "500 Internal Server Error"
            },
            "items": {
                "missingParams": "1. Missing Parameters",
                "invalidAmount": "2. Invalid Amount",
                "invalidCurrency": "3. Invalid Currency",
                "invalidSubject": "4. Invalid Subject",
                "outletNotFound": "5. Outlet Not Found",
                "acqOutletMismatch": "6. Acquirer-Outlet Mismatch",
                "outletNotApproved": "7. Outlet Not Approved",
                "outletNotApprovedOffline": "8. Outlet Not Approved for Alipay+ Offline",
                "terminalNotApproved": "9. Terminal Not Approved",
                "outletMissingMerchant": "10. Outlet Missing Merchant",
                "merchantNotFound": "11. Merchant Not Found",
                "acqMerchantMismatch": "12. Acquirer-Merchant Mismatch",
                "alipayUnreachable": "13. Alipay+ Unreachable",
                "xmlParseError": "14. XML Parse Error",
                "alipayFailed": "15. Alipay+ Failed",
                "sripayQrError": "16. SriPay QR Error",
                "serverError": "17. Server Error"
            }
        }
    },
    "orderCodeResultListener": {
        "title": "Order Code Result Listener",
        "badge": {
            "get": "GET"
        },
        "path": "{Host}/v2/alipayplus/instore/ordercode-listener/:outTradeNo",
        "intro": "This endpoint establishes a real-time connection using Server-Sent Events (SSE) to listen for updates on Alipay+ transactions identified by outTradeNo. It streams transaction status changes, converting timestamps from GMT+8 to Asia/Colombo (GMT+5:30).",
        "endpoint": {
            "title": "Endpoint",
            "items": {
                "url": "URL â {Host}/v2/alipayplus/instore/ordercode-listener/:outTradeNo",
                "method": "Method â GET",
                "description": "Provides real-time updates on the transaction status for a specific outTradeNo using SSE."
            }
        },
        "headers": {
            "title": "Headers",
            "items": {
                "acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
                "authorization": "Authorization (string, required): The authorization key for the acquirer.",
                "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
                "contentType": "Content-Type (string, required): Must be application/json."
            }
        },
        "request": {
            "title": "Request Parameters",
            "note": "The request includes a path parameter",
            "table": {
                "parameter": "Parameter",
                "type": "Type",
                "required": "Required",
                "description": "Description"
            },
            "params": {
                "outTradeNo": {
                    "type": "string",
                    "required": "Yes",
                    "description": "Unique identifier of the Alipay+ transaction."
                }
            },
            "validation": {
                "title": "Request Parameters Validation",
                "items": {
                    "outTradeNo": "outTradeNo: Required, must be a non-empty string."
                }
            }
        },
        "sample": {
            "title": "Sample Request",
            "urlLabel": "URL",
            "headersTitle": "Headers",
            "exampleUrl": "{Host}/v2/alipayplus/instore/ordercode-listener/abc1234567890",
            "headers": {
                "acquirerid": "acquirerid: acquirer_98765",
                "authorization": "Authorization: Bearer abc123xyz789",
                "authKey": "AuthKey: key_456def789",
                "contentType": "Content-Type: application/json"
            }
        },
        "success": {
            "title": "Success Response",
            "items": {
                "statusCode": "Status Code",
                "contentType": "Content Type",
                "responseBody": "Response Body"
            },
            "statusOk": "200 OK",
            "typeSSE": "text/event-stream",
            "bodyDesc": "Streams events in SSE format.",
            "examplePrefix": "Example (as of 01:37 PM +0530, Tuesday, August 05, 2025):",
            "eventUpdate": "event: update",
            "eventNotes": {
                "event": "event: update â Indicates a transaction update.",
                "data": "data â JSON array containing transaction details (id, trade_status, timestamp)."
            }
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "statusCode": "Status Code",
            "responseBody": "Response Body",
            "okWithError": "200 OK (with error event)",
            "eventError": "event: error",
            "items": {
                "firestoreError": "1. Firestore Listener Error",
                "unexpectedError": "2. Unexpected Server Error"
            }
        }
    },
    "orderCodeResultListner": {
        "title": "Order Code Result Listener",
        "badge": {
            "get": "GET"
        },
        "path": "{Host}/v2/alipayplus/instore/ordercode-listener/:outTradeNo",
        "intro": "This endpoint establishes a real-time connection using Server-Sent Events (SSE) to listen for updates on Alipay+ transactions identified by outTradeNo. It streams transaction status changes, converting timestamps from GMT+8 to Asia/Colombo (GMT+5:30).",
        "endpoint": {
            "title": "Endpoint",
            "items": {
                "url": "URL â {Host}/v2/alipayplus/instore/ordercode-listener/:outTradeNo",
                "method": "Method â GET",
                "description": "Provides real-time updates on the transaction status for a specific outTradeNo using SSE."
            }
        },
        "headers": {
            "title": "Headers",
            "items": {
                "acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
                "authorization": "Authorization (string, required): The authorization key for the acquirer.",
                "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
                "contentType": "Content-Type (string, required): Must be application/json."
            }
        },
        "request": {
            "title": "Request Parameters",
            "note": "The request includes a path parameter",
            "table": {
                "parameter": "Parameter",
                "type": "Type",
                "required": "Required",
                "description": "Description"
            },
            "params": {
                "outTradeNo": {
                    "type": "string",
                    "required": "Yes",
                    "description": "Unique identifier of the Alipay+ transaction."
                }
            },
            "validation": {
                "title": "Request Parameters Validation",
                "items": {
                    "outTradeNo": "outTradeNo: Required, must be a non-empty string."
                }
            }
        },
        "sample": {
            "title": "Sample Request",
            "urlLabel": "URL",
            "headersTitle": "Headers",
            "exampleUrl": "{Host}/v2/alipayplus/instore/ordercode-listener/abc1234567890",
            "headers": {
                "acquirerid": "acquirerid: acquirer_98765",
                "authorization": "Authorization: Bearer abc123xyz789",
                "authKey": "AuthKey: key_456def789",
                "contentType": "Content-Type: application/json"
            }
        },
        "success": {
            "title": "Success Response",
            "items": {
                "statusCode": "Status Code",
                "contentType": "Content Type",
                "responseBody": "Response Body"
            },
            "statusOk": "200 OK",
            "typeSSE": "text/event-stream",
            "bodyDesc": "Streams events in SSE format.",
            "examplePrefix": "Example (as of 01:37 PM +0530, Tuesday, August 05, 2025):",
            "eventUpdate": "event: update",
            "eventNotes": {
                "event": "event: update â Indicates a transaction update.",
                "data": "data â JSON array containing transaction details (id, trade_status, timestamp)."
            }
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "statusCode": "Status Code",
            "responseBody": "Response Body",
            "okWithError": "200 OK (with error event)",
            "eventError": "event: error",
            "items": {
                "firestoreError": "1. Firestore Listener Error",
                "unexpectedError": "2. Unexpected Server Error"
            }
        }
    },
    "orderCodeResultListener": {
        "title": "Order Code Result Listener",
        "intro": "This endpoint establishes a real-time connection using Server-Sent Events (SSE) to listen for updates on Alipay+ transactions identified by outTradeNo. It streams transaction status changes, converting timestamps from GMT+8 to Asia/Colombo (GMT+5:30).",
        "sections": {
            "step1": "Order Code Result Listener",
            "endpoint": "Endpoint",
            "headers": "Request Headers",
            "requestParams": "Request Parameters",
            "sampleRequest": "Sample Request",
            "successResponse": "Success Response",
            "errorResponses": "Error Responses"
        },
        "endpoint": {
            "title": "Endpoint",
            "urlLabel": "URL",
            "methodLabel": "Method",
            "descriptionLabel": "Description",
            "description": "Provides real-time updates on the transaction status for a specific outTradeNo using SSE."
        },
        "headers": {
            "title": "Headers",
            "items": {
                "acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
                "authorization": "Authorization (string, required): The authorization key for the acquirer.",
                "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
                "contentType": "Content-Type (string, required): Must be application/json."
            }
        },
        "requestParams": {
            "title": "Request Parameters",
            "intro": "The request includes a path parameter",
            "table": {
                "outTradeNo": "Unique identifier of the Alipay+ transaction."
            },
            "validationTitle": "Request Parameters Validation",
            "rules": {
                "outTradeNo": "Required, must be a non-empty string."
            }
        },
        "sample": {
            "title": "Sample Request",
            "urlExampleLabel": "URL",
            "headers": "Headers"
        },
        "success": {
            "title": "Success Response",
            "bullets": {
                "statusCode": "Status Code",
                "status200": "200 OK",
                "contentType": "Content Type",
                "eventStream": "text/event-stream",
                "responseBody": "Response Body",
                "streams": "Streams events in SSE format."
            },
            "exampleWithTime": "Example (as of 01:37 PM +0530, Tuesday, August 05, 2025):",
            "eventUpdate": "event: update",
            "items": {
                "event": "event: update - Indicates a transaction update.",
                "data": "data: JSON array containing transaction details (id, trade_status, timestamp)."
            }
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "items": {
                "firestoreError": "1. Firestore Listener Error",
                "unexpectedError": "2. Unexpected Server Error"
            },
            "okWithError": "200 OK (with error event)",
            "responseBody": "Response Body",
            "eventError": "event: error"
        }
    },
    "commons": {
        "yes": "Yes",
        "copy": "Copy",
        "copied": "Copied!",
        "statusCode": "Status Code",
        "contentType": "Content Type",
        "responseBody": "Response Body",
        "example": "Example",
        "labels": {
            "url": "URL",
            "method": "Method",
            "description": "Description"
        },
        "table": {
            "parameter": "Parameter",
            "type": "Type",
            "required": "Required",
            "description": "Description"
        },
        "headers": {
            "contentType": "Content-Type"
        },
        "http": {
            "get": "GET",
            "post": "POST"
        },
        "contentTypes": {
            "eventStream": "text/event-stream"
        },
        "mime": {
            "json": "application/json"
        }
    },
    "userPresentPay": {
        "title": "User Present Pay",
        "intro": "This endpoint initiates an Alipay+ overseas spot payment transaction for user-presented scenarios, validating acquirer, outlet, and terminal details, and generating a transaction request.",
        "sections": {
            "step1": "User Present Pay",
            "endpoint": "Endpoint",
            "requestHeader": "Request Header",
            "requestBody": "Request Body",
            "sampleRequest": "Sample Request",
            "successResponse": "Success Response",
            "errorResponses": "Error Responses"
        },
        "endpoint": {
            "title": "Endpoint",
            "urlLabel": "URL",
            "methodLabel": "Method",
            "descriptionLabel": "Description",
            "description": "Initiates a user-presented Alipay+ transaction by validating inputs and interacting with the Alipay+ API, tailored for acquirer integrations."
        },
        "headers": {
            "title": "Headers",
            "items": {
                "acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
                "authorization": "Authorization (string, required): The authorization key for the acquirer.",
                "authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
                "contentType": "Content-Type (string, required): Must be application/json."
            }
        },
        "requestBody": {
            "title": "Request Body",
            "intro": "The request body must be in JSON format and include the following parameters",
            "validationTitle": "Request Body Validation",
            "table": {
                "outletId": {
                    "description": "Unique identifier of the outlet.",
                    "validation": "Must be a non-empty string."
                },
                "amount": {
                    "description": "Transaction amount.",
                    "validation": "Must be a positive number greater than 0."
                },
                "subject": {
                    "description": "Description of the transaction.",
                    "validation": "Must be a string, max length 100 characters."
                },
                "currency": {
                    "description": "Currency of the transaction.",
                    "validation": "Must be either USD or LKR."
                },
                "terminalId": {
                    "description": "Unique identifier of the terminal.",
                    "validation": "Must be a non-empty string."
                },
                "buyerIdentityCode": {
                    "description": "Buyer's identity code (e.g., barcode).",
                    "validation": "Must be a non-empty string."
                }
            },
            "rules": {
                "outletId": "Required, non-empty string.",
                "amount": "Required, must be a positive number (greater than 0).",
                "subject": "Required, string with a maximum length of 100 characters.",
                "currency": "Required, must be one of USD or LKR.",
                "terminalId": "Required, non-empty string.",
                "buyerIdentityCode": "Required, non-empty string."
            }
        },
        "sample": {
            "title": "Sample Request",
            "headers": "Headers"
        },
        "success": {
            "title": "Success Response",
            "successLabel": "(Success)",
            "pendingLabel": "(Pending Authentication)"
        },
        "errors": {
            "title": "Error Responses",
            "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
            "items": {
                "missingParams": "1. Missing Parameters",
                "invalidAmount": "2. Invalid Amount",
                "invalidCurrency": "3. Invalid Currency",
                "invalidSubject": "4. Invalid Subject",
                "outletNotFound": "5. Outlet Not Found",
                "acquirerOutletMismatch": "6. Acquirer-Outlet Mismatch",
                "outletNotApproved": "7. Outlet Not Approved",
                "outletNotApprovedOffline": "8. Outlet Not Approved for Alipay+ Offline",
                "terminalNotApproved": "9. Terminal Not Approved",
                "outletMissingMerchant": "10. Outlet Missing Merchant",
                "merchantNotFound": "11. Merchant Not Found",
                "acquirerMerchantMismatch": "12. Acquirer-Merchant Mismatch",
                "alipayUnreachable": "13. Alipay+ Unreachable",
                "xmlParseError": "14. XML Parse Error",
                "alipayInvalidResponse": "15. Alipay+ Invalid Response",
                "alipayTransactionFailed": "16. Alipay+ Transaction Failed",
                "serverError": "17. Server Error"
            },
            "labels": {
                "badRequest": "Bad Request",
                "forbidden": "Forbidden",
                "notFound": "Not Found",
                "badGateway": "Bad Gateway",
                "internalServerError": "Internal Server Error"
            }
        }
    },
    "commont": {
        "yes": "Yes",
        "copy": "Copy",
        "copied": "Copied!",
        "statusCode": "Status Code",
        "contentType": "Content Type",
        "responseBody": "Response Body",
        "labels": {
            "url": "URL",
            "method": "Method",
            "description": "Description"
        },
        "table": {
            "parameter": "Parameter",
            "type": "Type",
            "required": "Required",
            "description": "Description",
            "validationRules": "Validation Rules"
        },
        "http": {
            "get": "GET",
            "post": "POST"
        },
        "mime": {
            "json": "application/json"
        }
    },
    "global_btn_copy": "Copy",
    "global_btn_copied": "Copied!",
    "global_http_get": "GET",
    "global_http_post": "POST",
    "global_table_parameter": "Parameter",
    "global_table_type": "Type",
    "global_table_required": "Required",
    "global_table_description": "Description",
    "global_label_statusCode": "Status Code",
    "global_label_contentType": "Content Type",
    "global_label_responseBody": "Response Body",
    "global_yes": "Yes",
    "acqUpwWait_nav_step1": "User Present Pay Waiting",
    "acqUpwWait_nav_step2": "Endpoint",
    "acqUpwWait_nav_step3": "Request Header",
    "acqUpwWait_nav_step4": "Request Parameters",
    "acqUpwWait_nav_step5": "Sample Request",
    "acqUpwWait_nav_step6": "Success Response",
    "acqUpwWait_nav_step7": "Error Responses",
    "acqUpwWait_title": "User Present Pay Waiting",
    "acqUpwWait_intro": "This endpoint retrieves the status of a user-presented Alipay transaction awaiting authentication, identified by partnerTransId. It allows rechecking to verify if user authentication has occurred, returning the latest transaction details.",
    "acqUpwWait_endpoint_heading": "Endpoint",
    "acqUpwWait_endpoint_urlLabel": "URL",
    "acqUpwWait_endpoint_methodLabel": "Method",
    "acqUpwWait_endpoint_descLabel": "Description",
    "acqUpwWait_endpoint_descText": "Fetches the transaction status for a given partnerTransId, useful for rechecking after user authentication, tailored for acquirer integrations.",
    "acqUpwWait_headers_heading": "Headers",
    "acqUpwWait_headers_acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
    "acqUpwWait_headers_authorization": "Authorization (string, required): The authorization key for the acquirer.",
    "acqUpwWait_headers_authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
    "acqUpwWait_headers_contentType": "Content-Type (string, required): Must be application/json.",
    "acqUpwWait_params_heading": "Request Parameters",
    "acqUpwWait_params_intro": "The request includes a path parameter",
    "acqUpwWait_params_table_partnerTransId_desc": "Unique identifier of the partner transaction.",
    "acqUpwWait_params_validation_heading": "Request Parameters Validation",
    "acqUpwWait_params_rule_partnerTransId": "Required, must be a non-empty string.",
    "acqUpwWait_params_rule_acquirerId": "Required, provided in headers as acquirerid or x-acq-id.",
    "acqUpwWait_sample_heading": "Sample Request",
    "acqUpwWait_sample_headers_title": "Headers",
    "acqUpwWait_success_heading": "Success Response",
    "acqUpwWait_success_responseBody_timeNote": "(as of 02:18 PM +0530, Tuesday, August 05, 2025)",
    "acqUpwWait_errors_heading": "Error Responses",
    "acqUpwWait_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
    "acqUpwWait_err1_title": "1. Missing Parameters",
    "acqUpwWait_err2_title": "2. Transaction Not Found",
    "acqUpwWait_err3_title": "3. Server Error",
    "vt_title": "Void Transactions",
    "vt_intro": "This endpoint allows an acquirer to void a successful Alipay transaction on the same day (Colombo time) it was completed, updating the transaction status and notifying relevant parties from an acquirer-centric perspective.",
    "vt_sections_step1": "Void Transactions",
    "vt_sections_endpoint": "Endpoint",
    "vt_sections_requestHeader": "Request Header",
    "vt_sections_requestBody": "Request Body",
    "vt_sections_sampleRequest": "Sample Request",
    "vt_sections_successResponse": "Success Response",
    "vt_sections_errorResponses": "Error Responses",
    "vt_endpoint_title": "Endpoint",
    "vt_endpoint_urlLabel": "URL",
    "vt_endpoint_methodLabel": "Method",
    "vt_endpoint_url": "{Host}/v2/alipayplus/instore/void-transaction",
    "vt_endpoint_description": "Voids a successful transaction if requested on the same Colombo calendar day as the original payment.",
    "vt_headers_title": "Headers",
    "vt_headers_item_acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
    "vt_headers_item_authorization": "Authorization (string, required): The authorization key for the acquirer.",
    "vt_headers_item_authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
    "vt_headers_item_contentType": "Content-Type (string, required): Must be application/json.",
    "vt_requestBody_title": "Request Body",
    "vt_requestBody_intro": "The request body must be in JSON format and include the following parameters",
    "vt_requestBody_validationTitle": "Request Body Validation",
    "vt_requestBody_table_transactionId_desc": "Unique identifier of the transaction to void.",
    "vt_requestBody_table_outletId_desc": "Unique identifier of the outlet associated with the transaction.",
    "vt_requestBody_rule_transactionId": "Required, non-empty string.",
    "vt_requestBody_rule_outletId": "Required, non-empty string.",
    "vt_requestBody_rule_acquirerId": "Required, provided in headers as acquirerid or x-acq-id.",
    "vt_sample_title": "Sample Request",
    "vt_sample_headers": "Headers",
    "vt_sample_body": "{\n    \"transactionId\": \"TXN_1234567890\",\n    \"outletId\": \"outlet_12345\"\n}",
    "vt_success_title": "Success Response",
    "vt_success_status200": "200 OK",
    "vt_success_body": "{\n    \"code\": \"VOID_SUCCESS\",\n    \"message\": \"Transaction voided successfully.\",\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"transactionId\": \"TXN_1234567890\",\n        \"trade_no\": null,\n        \"out_trade_no\": \"TXN_1234567890\",\n        \"timestamp\": \"2025-08-11 14:46:00\",\n        \"provider\": {\n            \"result_code\": \"SUCCESS\",\n            \"is_success\": \"T\"\n        }\n    }\n}",
    "vt_errors_title": "Error Responses",
    "vt_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
    "vt_err_1_title": "1. Missing Parameters",
    "vt_err_1_status": "400 Bad Request",
    "vt_err_1_body": "{\n    \"code\": \"MISSING_PARAMS\",\n    \"message\": \"transactionId and outletId are required.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_2_title": "2. Missing Authentication",
    "vt_err_2_status": "401 Unauthorized",
    "vt_err_2_body": "{\n    \"code\": \"MISSING_AUTH\",\n    \"message\": \"Missing acquirer authentication (x-acq-id).\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_3_title": "3. Acquirer Not Found",
    "vt_err_3_status": "404 Not Found",
    "vt_err_3_body": "{\n    \"code\": \"ACQUIRER_NOT_FOUND\",\n    \"message\": \"Acquirer not found: acquirer_98765\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_4_title": "4. Acquirer Inactive",
    "vt_err_4_status": "403 Forbidden",
    "vt_err_4_body": "{\n    \"code\": \"ACQUIRER_INACTIVE\",\n    \"message\": \"Acquirer is not active.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_5_title": "5. Outlet Not Found",
    "vt_err_5_status": "404 Not Found",
    "vt_err_5_body": "{\n    \"code\": \"OUTLET_NOT_FOUND\",\n    \"message\": \"Outlet not found: outlet_12345\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_6_title": "6. Outlet No Merchant",
    "vt_err_6_status": "400 Bad Request",
    "vt_err_6_body": "{\n    \"code\": \"OUTLET_NO_MERCHANT\",\n    \"message\": \"Outlet is missing merchant link.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_7_title": "7. Outlet No Acquirer",
    "vt_err_7_status": "400 Bad Request",
    "vt_err_7_body": "{\n    \"code\": \"OUTLET_NO_ACQUIRER\",\n    \"message\": \"Outlet is missing acquirer link.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_8_title": "8. Acquirer-Outlet Mismatch",
    "vt_err_8_status": "403 Forbidden",
    "vt_err_8_body": "{\n    \"code\": \"ACQUIRER_OUTLET_MISMATCH\",\n    \"message\": \"Outlet does not belong to provided acquirerId.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_9_title": "9. Merchant Not Found",
    "vt_err_9_status": "404 Not Found",
    "vt_err_9_body": "{\n    \"code\": \"MERCHANT_NOT_FOUND\",\n    \"message\": \"Merchant not found: <merchantId>\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_10_title": "10. Transaction Not Found",
    "vt_err_10_status": "404 Not Found",
    "vt_err_10_body": "{\n    \"code\": \"TXN_NOT_FOUND\",\n    \"message\": \"Transaction not found: TXN_1234567890\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_11_title": "11. Transaction Outlet Mismatch",
    "vt_err_11_status": "403 Forbidden",
    "vt_err_11_body": "{\n    \"code\": \"TXN_OUTLET_MISMATCH\",\n    \"message\": \"Transaction does not belong to the given outletId.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_12_title": "12. Transaction Acquirer Mismatch",
    "vt_err_12_status": "403 Forbidden",
    "vt_err_12_body": "{\n    \"code\": \"TXN_ACQUIRER_MISMATCH\",\n    \"message\": \"Transaction does not belong to the given acquirerId.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_13_title": "13. Invalid Status",
    "vt_err_13_status": "400 Bad Request",
    "vt_err_13_body": "{\n    \"code\": \"INVALID_STATUS\",\n    \"message\": \"Only SUCCESS transactions can be voided.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_14_title": "14. Invalid Transaction Timestamp",
    "vt_err_14_status": "400 Bad Request",
    "vt_err_14_body": "{\n    \"code\": \"INVALID_TXN_TIMESTAMP\",\n    \"message\": \"Transaction timestamp is missing/invalid.\",\n    \"status\": \"FAIL\"\n}",
    "vt_err_15_title": "15. Void Window Closed",
    "vt_err_15_status": "400 Bad Request",
    "vt_err_15_body": "{\n    \"code\": \"VOID_WINDOW_CLOSED\",\n    \"message\": \"Voids are only allowed until 11:59:59 PM on the Colombo date of the transaction.\",\n    \"status\": \"FAIL\",\n    \"txnDateColombo\": \"2025-08-10\",\n    \"nowDateColombo\": \"2025-08-11\"\n}",
    "vt_err_16_title": "16. Alipay Config Missing",
    "vt_err_16_status": "500 Internal Server Error",
    "vt_err_16_body": "{\n    \"code\": \"ALIPAY_CONFIG_MISSING\",\n    \"message\": \"Alipay config missing (endpoint/partner).\",\n    \"status\": \"ERROR\"\n}",
    "vt_err_17_title": "17. Alipay Parse Error",
    "vt_err_17_status": "502 Bad Gateway",
    "vt_err_17_body": "{\n    \"code\": \"ALIPAY_PARSE_ERROR\",\n    \"message\": \"Failed to parse Alipay response XML.\",\n    \"status\": \"ERROR\"\n}",
    "vt_err_18_title": "18. Alipay Void Failed",
    "vt_err_18_status": "400 Bad Request",
    "vt_err_18_body": "{\n    \"code\": \"ALIPAY_VOID_FAILED\",\n    \"message\": \"Alipay void failed.\",\n    \"status\": \"FAIL\",\n    \"provider\": {\n        \"is_success\": \"F\",\n        \"result_code\": \"FAILURE\",\n        \"detail_error_code\": \"CODE_123\",\n        \"detail_error_des\": \"Invalid transaction state\"\n    },\n    \"timestamp\": \"2025-08-11 14:46:00\"\n}",
    "vt_err_19_title": "19. Void Error",
    "vt_err_19_status": "500 Internal Server Error",
    "vt_err_19_body": "{\n    \"code\": \"VOID_ERROR\",\n    \"message\": \"Unexpected error processing void.\",\n    \"status\": \"ERROR\",\n    \"error\": \"Specific error message.\",\n    \"timestamp\": \"2025-08-11 14:46:00\"\n}",
    "vt_ui_post": "POST",
    "vt_ui_statusCode": "Status Code",
    "vt_ui_contentType": "Content Type",
    "vt_ui_responseBody": "Response Body",
    "vt_ui_copy": "Copy",
    "vt_ui_copied": "Copied!",
    "ipi_sections_step1": "instore payment inquiry",
    "ipi_sections_endpoint": "Endpoint",
    "ipi_sections_requestHeader": "Request Header",
    "ipi_sections_requestParams": "Request Parameters",
    "ipi_sections_sampleRequest": "Sample Request",
    "ipi_sections_successResponse": "Success Response",
    "ipi_sections_errorResponses": "Error Responses",
    "ipi_title": "Instore Payment Inquiry",
    "ipi_intro": "This endpoint retrieves detailed information about transactions and refunds associated with a specific transactionId (trade_no) for a given acquirer, sorting results by timestamp in descending order.",
    "ipi_ui_get": "GET",
    "ipi_ui_statusCode": "Status Code",
    "ipi_ui_contentType": "Content Type",
    "ipi_ui_responseBody": "Response Body",
    "ipi_ui_url": "URL",
    "ipi_ui_method": "Method",
    "ipi_ui_copy": "Copy",
    "ipi_ui_copied": "Copied!",
    "ipi_endpoint_title": "Endpoint",
    "ipi_endpoint_url": "{Host}/v2/alipayplus/instore/pay-info/:transactionId",
    "ipi_headers_title": "Headers",
    "ipi_headers_item_acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
    "ipi_headers_item_authorization": "Authorization (string, required): The authorization key for the acquirer.",
    "ipi_headers_item_authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
    "ipi_headers_item_contentType": "Content-Type (string, required): Must be application/json.",
    "ipi_params_title": "Request Parameters",
    "ipi_params_intro": "The request includes a path parameter",
    "ipi_params_table_transactionId_desc": "Unique identifier of the transaction (trade_no).",
    "ipi_params_validationTitle": "Request Parameters Validation",
    "ipi_params_rule_transactionId": "Required, must be a non-empty string.",
    "ipi_tbl_parameter": "Parameter",
    "ipi_tbl_type": "Type",
    "ipi_tbl_required": "Required",
    "ipi_tbl_description": "Description",
    "ipi_sample_title": "Sample Request",
    "ipi_sample_urlLabel": "URL",
    "ipi_sample_urlValue": "{Host}/v2/alipayplus/instore/pay-info/ALIPAY_TX_123456",
    "ipi_sample_headers": "Headers",
    "ipi_success_title": "Success Response",
    "ipi_success_status200": "200 OK",
    "ipi_success_body": "{\n    \"code\": \"TRANSACTION_FOUND\",\n    \"message\": \"Transaction record(s) retrieved successfully.\",\n    \"status\": \"SUCCESS\",\n    \"data\": {\n        \"transactions\": [\n            {\n                \"transactionId\": \"tx123456\",\n                \"timestamp\": \"2025-08-05 14:20:00\",\n                \"currency\": \"USD\",\n                \"amount\": \"50.00\",\n                \"outletName\": \"Outlet XYZ\",\n                \"outletId\": \"outlet_12345\",\n                \"subject\": \"Purchase at Outlet XYZ\",\n                \"transactionStatus\": \"SUCCESS\",\n                \"settlementStatus\": true,\n                \"paymentMethod\": \"Alipay+\"\n            },\n            {\n                \"transactionId\": \"refund123\",\n                \"timestamp\": \"2025-08-05 14:15:00\",\n                \"currency\": \"USD\",\n                \"amount\": \"25.00\",\n                \"outletName\": \"Outlet XYZ\",\n                \"outletId\": \"outlet_12345\",\n                \"subject\": \"Partial Refund\",\n                \"transactionStatus\": \"REFUNDED\",\n                \"settlementStatus\": false,\n                \"paymentMethod\": \"Alipay+\"\n            }\n        ]\n    }\n}",
    "ipi_errors_title": "Error Responses",
    "ipi_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
    "ipi_err_1_title": "1. Missing Transaction ID",
    "ipi_err_1_status": "400 Bad Request",
    "ipi_err_1_body": "{\n    \"code\": \"MISSING_TRANSACTION_ID\",\n    \"message\": \"transactionId (trade_no) is required.\",\n    \"status\": \"FAIL\"\n}",
    "ipi_err_2_title": "2. Transaction Not Found",
    "ipi_err_2_status": "404 Not Found",
    "ipi_err_2_body": "{\n    \"code\": \"TRANSACTION_NOT_FOUND\",\n    \"message\": \"No transaction or refund record found for the given trade number.\",\n    \"status\": \"FAIL\"\n}",
    "ipi_err_3_title": "3. Server Error",
    "ipi_err_3_status": "500 Internal Server Error",
    "ipi_err_3_body": "{\n    \"code\": \"SERVER_ERROR\",\n    \"message\": \"An error occurred while retrieving transaction details.\",\n    \"status\": \"ERROR\",\n    \"error\": \"Specific error message\"\n}",
    "opi_sections_step1": "Payment Inquiry",
    "opi_sections_endpoint": "Endpoint",
    "opi_sections_requestHeader": "Request Header",
    "opi_sections_requestParams": "Request Parameters",
    "opi_sections_sampleRequest": "Sample Request",
    "opi_sections_successResponse": "Success Response",
    "opi_sections_errorResponses": "Error Responses",
    "opi_title": "Payment Inquiry",
    "opi_intro": "This endpoint retrieves detailed information about payment and refund transactions associated with a specific paymentRequestId for a given acquirer, sorting results by timestamp in descending order.",
    "opi_ui_get": "GET",
    "opi_ui_statusCode": "Status Code",
    "opi_ui_contentType": "Content Type",
    "opi_ui_responseBody": "Response Body",
    "opi_ui_url": "URL",
    "opi_ui_method": "Method",
    "opi_ui_description": "Description",
    "opi_ui_copy": "Copy",
    "opi_ui_copied": "Copied!",
    "opi_endpoint_title": "Endpoint",
    "opi_endpoint_url": "{Host}/v2/alipayplus/online/pay-info/:id",
    "opi_endpoint_description": "Fetches payment and refund records from the AlipayPlus-Transactions and AlipayPlus-Refund-Transactions collections based on paymentRequestId, tailored for acquirer integrations.",
    "opi_headers_title": "Headers",
    "opi_headers_item_acquirerId": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
    "opi_headers_item_authorization": "Authorization (string, required): The authorization key for the acquirer.",
    "opi_headers_item_authKey": "Auth-Key (string, required): The authentication key for the acquirer.",
    "opi_headers_item_contentType": "Content-Type (string, required): Must be application/json.",
    "opi_params_title": "Request Parameters",
    "opi_params_intro": "The request includes a path parameter",
    "opi_params_table_id_desc": "Unique identifier of the payment request (paymentRequestId).",
    "opi_params_validationTitle": "Request Parameter Validation",
    "opi_params_rule_id": "Required, must be a non-empty string (represents paymentRequestId).",
    "opi_tbl_parameter": "Parameter",
    "opi_tbl_type": "Type",
    "opi_tbl_required": "Required",
    "opi_tbl_description": "Description",
    "opi_sample_title": "Sample Request",
    "opi_sample_urlLabel": "URL",
    "opi_sample_urlValue": "{Host}/v2/alipayplus/online/pay-info/PAY_1234567890abcdef",
    "opi_sample_headers": "Headers",
    "opi_success_title": "Success Response",
    "opi_success_status200": "200 OK",
    "opi_success_body": "{\n    \"code\": \"TRANSACTION_FOUND\",\n    \"message\": \"Transaction record(s) retrieved successfully.\",\n    \"status\": \"SUCCESS\",\n    \"data\": [\n        {\n            \"paymentId\": \"PAY_1234567890abcdef\",\n            \"timestamp\": \"2025-08-05 14:50:00\",\n            \"outletId\": \"outlet_12345\",\n            \"outletName\": \"Outlet XYZ\",\n            \"orderDescription\": \"Online purchase at Outlet XYZ\",\n            \"paymentResult\": \"SUCCESS\",\n            \"currency\": \"USD\",\n            \"paymentAmount\": \"50.00\",\n            \"paymentMethod\": \"CONNECT_WALLET\",\n            \"walletBrandName\": \"Alipay\",\n            \"env\": { \"terminalType\": \"WEB\" },\n            \"is_settled\": false\n        },\n        {\n            \"paymentId\": \"PAY_1234567890abcdef\",\n            \"timestamp\": \"2025-08-05 14:45:00\",\n            \"outletId\": \"outlet_12345\",\n            \"outletName\": \"Outlet XYZ\",\n            \"orderDescription\": \"Partial Refund\",\n            \"paymentResult\": \"SUCCESS\",\n            \"currency\": \"USD\",\n            \"paymentAmount\": \"25.00\",\n            \"paymentMethod\": \"CONNECT_WALLET\",\n            \"walletBrandName\": \"Alipay\",\n            \"env\": { \"terminalType\": \"WEB\" },\n            \"is_settled\": false\n        }\n    ]\n}",
    "opi_errors_title": "Error Responses",
    "opi_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages",
    "opi_err_1_title": "1. Missing Parameters",
    "opi_err_1_status": "400 Bad Request",
    "opi_err_1_body": "{\n    \"code\": \"MISSING_PARAMS\",\n    \"message\": \"paymentRequestId and acquirerId are required.\",\n    \"status\": \"FAIL\"\n}",
    "opi_err_2_title": "2. Transaction Not Found",
    "opi_err_2_status": "404 Not Found",
    "opi_err_2_body": "{\n    \"code\": \"TRANSACTION_NOT_FOUND\",\n    \"message\": \"No transaction found for paymentId: PAY_1234567890abcdef, acquirerId: acquirer_98765\",\n    \"status\": \"FAIL\"\n}",
    "opi_err_3_title": "3. Transaction Error",
    "opi_err_3_status": "500 Internal Server Error",
    "opi_err_3_body": "{\n    \"code\": \"TRANSACTION_ERROR\",\n    \"message\": \"Error fetching transaction data.\",\n    \"status\": \"ERROR\",\n    \"error\": \"Specific error message\"\n}",
    "marketing_hero_badge": "Payment Marketing",
    "marketing_hero_title_1": "Transform every",
    "marketing_hero_title_2": "transaction into a",
    "marketing_hero_title_3": "rewarding experience.",
    "marketing_hero_desc": "Enhance the checkout experience online and in-store. SriPay connects customised incentives and exclusive offers with your payment methods, giving customers more reasons to choose you every time they pay.",
    "marketing_contact_btn": "Contact Us",
    "marketing_cards_header": "Marketing Materials",
    "marketing_card_multi_title": "Multi-currency settlement",
    "marketing_card_multi_desc": "Process globally and show discounts in each customerâs local currencyâautomatically.",
    "marketing_card_top_title": "Top-rated merchant",
    "marketing_card_top_desc": "As your transaction volume grows, your commission rate goes down.",
    "marketing_card_social_title": "Social media promotions",
    "marketing_card_social_desc": "We promote our merchants across social channels and on SriPay-integrated business sites for extra reach.",
    "marketing_top_title": "Top Rated Merchant",
    "marketing_top_desc": "Show Top Rated Batch in Outlet Dashboard.",
    "marketing_qr_title": "In-store QR Card",
    "marketing_qr_desc": "Our marketing technology analyses user payment behaviour to deliver personalised instant incentivesâsuch as discounts, points and giftsâto help boost conversions for merchants in their stores, and generate new revenue streams for mobile payment providers."

    ,
    "branding": {
    "title": "SriPay Fundamental Brand Guidelines",
    "brandAssets": {
      "title": "Brand Mark Assets (ZIP)",
      "desc": "Download official SriPay brand mark assets for use across print and digital. The ZIP includes vector and raster logo files in multiple formats and colorways, ready for light and dark backgrounds. Please follow the SriPay Fundamental Brand Guidelines when applying these assets.",
      "formats": "â¢ Formats: SVG, PNG (@1x, @2x), PDF",
      "colorways": "â¢ Colorways: Full color, monochrome (black/white)",
      "backgrounds": "â¢ Backgrounds: Light, dark, transparent",
      "extras": "â¢ Extras: Clear-space & minimum size notes (README)",
      "downloadBtn": "Download Brand_Mark_Assets.zip",
      "note": "Note: Some browsers may block ZIP previews. If âOpen in new tabâ doesnât work, use âDownloadâ."
    },
    "guidelines": {
      "title": "Fundamental Brand Guidelines"
    },
    "mobile": {
      "notice": "PDF preview is disabled on mobile and tablet. Use the links below:",
      "open": "Open in new tab",
      "download": "Download Guidelines",
      "tip": "Tip: If opening in a new tab doesnât work, try the Download button."
    },
    "desktop": {
      "fallback": "If the embedded PDF doesnât load, use âOpen in new tabâ or âDownload PDFâ."
    }
  },
  "merchantEndpoints": {
    "title": "Endpoints",
    "desc": "SriPay Connect provides the following API endpoints, enabling acquirers to seamlessly integrate with their Web, POS systems or other payment platforms.",
    "sections": {
      "instore": "Alipay+ Instore API",
      "instore_items": {
        "orderCodePay": "Order Code Pay QR",
        "orderCodeListener": "Order Code Result Listener",
        "userPresentPay": "User Present Pay",
        "userPresentPayWaiting": "User Present Pay Waiting",
        "voidTransactions": "Void Transactions",
        "inquiry": "Instore Payment Inquiry",
        "notSettled": "Instore Not Settled Latest Transactions"
      },
      "merchantWeb": "Merchant Web Frame for Online Payment",
      "merchantWeb_items": {
        "paymentRequest": "Payment Request"
      },
      "online": "Alipay+ Online API",
      "online_items": {
        "paymentLinkCreate": "Payment Link Create",
        "paymentInquiry": "Payment Inquiry"
      },
      "card": "Card Payments For Online (Visa, Mastercard, Union Pay)",
      "card_items": {
        "paymentLinkCreate": "Payment Link Create",
        "paymentInquiry": "Payment Inquiry"
      }
    }
  },
  "mao_sections_overview": "Overview",
  "mao_sections_reqStructure": "API Request Structure",
  "mao_sections_reqUrl": "Request URL Format",
  "mao_sections_reqMethod": "Request Method",
  "mao_sections_reqHeaders": "Request Headers",
  "mao_sections_respBody": "Response Body",
  "mao_sections_respCodes": "Response Codes",

  "mao_title": "Merchant API Overview",
  "mao_intro_1": "The Merchant API, powered by SriPay and integrated with Alipay+, Visa, Mastercard, UnionPay, Amex provides a secure and robust solution for merchants to process payments, manage accounts, and handle transactions programmatically. This API supports various payment methods, including online payments, merchant-presented mode payments ( dynamic QR codes), user-presented mode payments, payment voids, and refunds. Designed for simplicity and security, the API ensures consistent request handling through common headers and strict validation.",
  "mao_intro_2": "This documentation outlines the API's endpoints, request structures, workflows, and error scenarios, with examples to facilitate integration.",

  "mao_reqStructure_title": "API Request Structure",
  "mao_reqStructure_list_1": "Request URL Format",
  "mao_reqStructure_list_2": "Request Method",
  "mao_reqStructure_list_3": "Request Headers",
  "mao_reqStructure_list_3_a": "Authorization Key",
  "mao_reqStructure_list_3_b": "Merchant Id",
  "mao_reqStructure_list_3_c": "Content-Type",
  "mao_reqStructure_list_4": "Response Body",
  "mao_reqStructure_list_5": "Response Code",

  "mao_reqUrl_title": "1. Request URL Format",
  "mao_reqUrl_desc": "The SriPay Connect Merchant API follows a structured request URL format, which is composed of two distinct parts",
  "mao_reqUrl_host_label": "Host",
  "mao_reqUrl_host_desc": "The base URL of the SriPay Connect Merchant API environment you are connecting to.",
  "mao_reqUrl_endpoint_label": "Endpoint",
  "mao_reqUrl_endpoint_desc": "The specific API path that defines the service or operation being requested.",
  "mao_reqUrl_example_label": "Example",
  "mao_reqUrl_complete": "Complete Request URL",

  "mao_reqMethod_title": "2. Request Method",
  "mao_reqMethod_desc": "SriPay Connect Merchant APIs support only two HTTPS request methods",
  "mao_reqMethod_post": "POST",
  "mao_reqMethod_post_desc": "â Used for creating or submitting new data to the server.",
  "mao_reqMethod_post_example": "Example: Initiating a payment, creating a transaction, sending a request for processing.",
  "mao_reqMethod_get": "GET",
  "mao_reqMethod_get_desc": "â Used for retrieving data from the server.",
  "mao_reqMethod_get_example": "Example: Fetching transaction details, retrieving status updates, or querying records.",

  "mao_reqHeaders_title": "3. Request Headers",
  "mao_reqHeaders_desc": "All SriPay Connect Merchant API requests must include the following headers to ensure proper authentication and routing:",
  "mao_tbl_headerName": "Header Name",
  "mao_tbl_description": "Description",
  "mao_tbl_example": "Example",

  "mao_headers_auth_name": "Authorization or x-api-key",
  "mao_headers_auth_desc": "API key used for authenticating requests.",
  "mao_headers_merchant_name": "MerchantId or x-mch-id",
  "mao_headers_merchant_desc": "Unique identifier assigned to each merchant for request routing and access control.",
  "mao_headers_ct_name": "Content-Type",
  "mao_headers_ct_desc": "Defines the format of the request body. Always use application/json.",

  "mao_keys_steps_title": "Steps to retrieve your keys:",
  "mao_keys_step_1": "Go to your profile.",
  "mao_keys_step_2": "Click API Management.",
  "mao_keys_step_3": "Verify using your password.",
  "mao_keys_step_4": "Retrieve your keys.",

  "mao_respBody_title": "4. Response Body",
  "mao_respBody_desc": "All API responses include a Result object containing three key fields",
  "mao_respBody_code": "Code",
  "mao_respBody_code_desc": "â A short, machine readable identifier that indicates the outcome of the request. This is used primarily for programmatic handling.",
  "mao_respBody_message": "Message",
  "mao_respBody_message_desc": "â A human readable description providing additional details about the result. This is suitable for user-facing error messages and logging.",
  "mao_respBody_status": "Status",
  "mao_respBody_status_desc": "â The business level outcome category of the request or transaction. This helps track workflow states such as approval, rejection, or pending processing.",

  "mao_respCodes_title": "5. Response Code",
  "mao_respCodes_desc": "SriPay Connect ACQ APIs return standard HTTP status codes along with the response body to indicate the result of the request at the protocol level.",
  "mao_tbl_code": "Code",
  "mao_tbl_name": "Name",
  "mao_tbl_typical": "Typical Use",

  "mao_code_200_name": "OK",
  "mao_code_200_desc": "The request was successful and the server returned the expected data.",
  "mao_code_200_typical": "Successful API request.",

  "mao_code_201_name": "Created",
  "mao_code_201_desc": "The request was successful and a new resource was created.",
  "mao_code_201_typical": "Payment created, transaction initiated.",

  "mao_code_202_name": "Accepted",
  "mao_code_202_desc": "The request has been accepted for processing, but the operation is not yet complete.",
  "mao_code_202_typical": "Asynchronous operations, queued requests.",

  "mao_code_204_name": "No Content",
  "mao_code_204_desc": "The request was successful but there is no content to return.",
  "mao_code_204_typical": "Delete operations, empty successful responses.",

  "mao_code_400_name": "Bad Request",
  "mao_code_400_desc": "The request was malformed or missing required parameters.",
  "mao_code_400_typical": "Validation errors, missing fields.",

  "mao_code_401_name": "Unauthorized",
  "mao_code_401_desc": "Authentication failed or API key is missing/invalid.",
  "mao_code_401_typical_prefix": "Missing/invalid",
  "mao_code_401_typical_suffix": "header.",

  "mao_code_403_name": "Forbidden",
  "mao_code_403_desc": "The authenticated user does not have permission to perform this action.",
  "mao_code_403_typical": "Role-based access restrictions.",

  "mao_code_404_name": "Not Found",
  "mao_code_404_desc": "The requested resource could not be found.",
  "mao_code_404_typical": "Invalid endpoint or resource ID.",

  "mao_code_409_name": "Conflict",
  "mao_code_409_desc": "The request could not be completed due to a conflict with the current state of the resource.",
  "mao_code_409_typical": "Duplicate transactions, conflicting updates.",

  "mao_code_500_name": "Internal Server Error",
  "mao_code_500_desc": "An unexpected server error occurred.",
  "mao_code_500_typical": "Any unhandled backend error.",

  "wfo_sections_step1": "Merchant Web Frame for Online Payment",
  "wfo_sections_overview": "Overview",
  "wfo_sections_features": "Key Features",
  "wfo_sections_benefits": "Merchant Benefits",

  "wfo_title": "Merchant Web Frame for Online Payment",
  "wfo_intro": "The SriPay Connect Merchant Web Frame is a unified, secure, and responsive payment interface designed to simplify the online payment experience for merchants and customers alike. This dynamic payment frame aggregates multiple payment options into a single integration, reducing complexity and accelerating time-to-market.",

  "wfo_overview_title": "Overview",
  "wfo_overview_desc": "Merchants can integrate a single API endpoint into their website or web store to enable a complete suite of online payment methods without the need for multiple gateways or configurations.",
  "wfo_img_alt": "Merchant Web Frame Overview",

  "wfo_features_title": "Key Features",

  "wfo_feat1_title": "One Integration. All Payments.",
  "wfo_feat1_desc_part1": "Supports a wide range of payment methods including",
  "wfo_feat1_desc_part2": "via a",
  "wfo_feat1_desc_part3": "single endpoint",

  "wfo_feat2_title": "Multi-Currency Support",
  "wfo_feat2_desc_main": "Accepts payments in both",
  "wfo_feat2_note_label": "Note:",
  "wfo_feat2_note_msg": "Alipay+ Online is available for USD transactions only",

  "wfo_feat3_title": "Real-Time Transaction Updates",
  "wfo_feat3_desc_part1": "Customers receive instant",
  "wfo_feat3_desc_bold": "SMS notifications upon successful payments",
  "wfo_feat3_desc_part2": "enhancing transparency and trust.",

  "wfo_feat4_title": "Secure & Compliant",
  "wfo_feat4_desc_part1": "Built on",
  "wfo_feat4_desc_part2": "infrastructure with tokenization and end-to-end encryption, ensuring the highest level of data security.",

  "wfo_feat5_title": "Responsive by Design",
  "wfo_feat5_desc": "Fully mobile optimized to ensure smooth checkout experiences across devices.",

  "wfo_benefits_title": "Merchant Benefits",
  "wfo_benefit_1": "Reduce integration overhead and developer workload",
  "wfo_benefit_2": "Faster onboarding and deployment",
  "wfo_benefit_3": "Centralized reconciliation and reporting",
  "wfo_benefit_4": "Lower maintenance with unified backend architecture",
  "wfo_benefit_5": "Future-ready with support for upcoming payment methods"
  ,
  "cpo_title": "Card Payments For Online (Visa, Mastercard, Union Pay)",
  "cpo_intro": "SriPay Connect offers seamless online card payment acceptance through a unified interface, enabling merchants to accept Visa, Mastercard, UnionPay, and American Express (Amex) cards with a single integration.",
  "cpo_overview_title": "Overview",
  "cpo_overview_body": "Our online card payment solution is designed for high performance, security, and flexibility, supporting both LKR and USD currencies. With built-in compliance and fraud protection, merchants can confidently offer card payments to local and international customers.",


  "acquirer": {
    "download": "Download the Agreement",
    "title": "AliPay+ Services Provider Agreement â Sub Acquirer [Offline Spot Payment]",
    "subtitle": "This Alipay+ Service Provider Agreement for IPG (online) and offline payments",

    "section3_4_b_iii": "iii) requiring submission by the Sub Merchant of true copies of valid Business Registration, Form 1, Sri Lankan National Identity Card or Passport of Director/s, Partner/s and/or the Proprietor as applicable including Sub Merchantsâ bank account statements for last 3 months along with original board resolution (if applicable), provided the above documents are obtained by Acquirer and provided to Bank in electronic format.",
    "section3_4_c": "(c) not allow any Sub Merchant to request an Authorization, if the Sub Merchant is on the 'Black list' â¦",
    "section3_4_d": "(d) not allow any Sub Merchant to request an Authorization, if it is aware â¦",
    "section3_4_e": "(e) facilitate and provide all reasonably required information/documents â¦",
    "section3_4_f": "(f) maintain confidentiality of Payment Transactions and Cardholder data â¦",
    "section3_4_g": "(g) not engage any third party â¦",
    "section3_4_h": "(h) not share with any person the passwords â¦",
    "section3_4_i": "(i) at all times comply with all applicable laws â¦",
    "section3_4_j": "(j) the Acquirer and/or the Acquirer Group Companies must hold PCI-DSS â¦",

    "section3_5": "3.5 The Bank grants to the Acquirer â¦",
    "section4_title": "4. OBLIGATIONS OF THE BANK",
    "section4_1": "4.1 The Bank shall provide their Alipay+ Payment Gateway â¦",
    "section4_2": "4.2 The Bank shall comply with all laws â¦",
    "section4_3": "4.3 The Bank shall maintain confidentiality â¦",
    "section4_4": "4.4 The Bank shall ensure that a dedicated bank account â¦"

    
  },
  "mocpq": {
    "title": "Order Code Pay QR",
    "intro": "The Order Code Pay option allows the merchant to generate a dynamic QR code and display it to the customer for payment. The merchant then receives the payment result in real time. The following API specifies the criteria required to initiate the request.",
    "sections": {
      "step1": "Order Code Pay QR",
      "step2": "Endpoint",
      "step3": "Request Header",
      "step4": "Request Body",
      "step5": "Sample Request",
      "step6": "Success Response",
      "step7": "Error Responses"
    },
    "endpoint": {
      "title": "Endpoint",
      "urlLabel": "URL",
      "methodLabel": "Method"
    },
    "http": {
      "post": "POST",
      "get": "GET"
    },
    "headers": {
      "title": "Headers",
      "items": {
        "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
        "authorization": "Authorization or x-api-key (string, required): The unique identifier Key of the merchant."
      }
    },
    "requestBody": {
      "title": "Request Body",
      "intro": "The request body must be in JSON format and include the following parameters",
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "validationRules": "Validation Rules",
        "rows": {
          "outletId": {
            "description": "Unique identifier of the outlet.",
            "validation": "Must be a non-empty string."
          },
          "amount": {
            "description": "Transaction amount.",
            "validation": "Must be a positive number greater than 0."
          },
          "subject": {
            "description": "Description of the transaction.",
            "validation": "Must be a string, max length 100 characters."
          },
          "currency": {
            "description": "Currency of the transaction.",
            "validation": "Must be either USD or LKR."
          },
          "terminalId": {
            "description": "Unique identifier of the terminal.",
            "validation": "Must be a non-empty string."
          }
        }
      },
      "validationTitle": "Request Body Validation",
      "rules": {
        "outletId": "Required, non-empty string.",
        "amount": "Required, must be a positive number (greater than 0).",
        "subject": "Required, string with a maximum length of 100 characters.",
        "currency": "Required, must be one of USD or LKR.",
        "terminalId": "Required, non-empty string."
      }
    },
    "sample": {
      "title": "Sample Request",
      "headersLabel": "Headers"
    },
    "success": {
      "title": "Success Response",
      "statusCodeLabel": "Status Code",
      "contentTypeLabel": "Content Type",
      "responseBodyLabel": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "items": {
        "missingParams": "1. Missing Parameters",
        "invalidAmount": "2. Invalid Amount",
        "invalidCurrency": "3. Invalid Currency",
        "invalidSubject": "4. Invalid Subject",
        "outletNotFound": "5. Outlet Not Found",
        "merchantOutletMismatch": "6. Merchant-Outlet Mismatch",
        "outletNotApproved": "7. Outlet Not Approved",
        "outletNotApprovedAplusOffline": "8. Outlet Not Approved for Alipay+ Offline",
        "terminalNotApproved": "9. Terminal Not Approved or Not Found",
        "merchantNotFound": "10. Merchant Not Found",
        "alipayFailed": "11. Alipay Request Failed",
        "xmlParseError": "12. XML Parse Error",
        "serverError": "13. Server Error"
      }
    },
    "httpStatus": {
      "badRequest": "400 Bad Request",
      "forbidden": "403 Forbidden",
      "notFound": "404 Not Found",
      "internalServerError": "500 Internal Server Error",
      "ok": "200 OK"
    },
    "common": {
      "yes": "Yes",
      "applicationJson": "application/json",
      "notes": "Notes"
    },
    "notes": {
      "n1": "The endpoint interacts with Alipay's API to generate a QR code for offline transactions.",
      "n2": "The merchantId can be provided in the headers as either merchantid or x-mch-id.",
      "n3": "The generated QR code URLs are returned in the allPicUrls object, including payment QR, big, small, and medium-sized images.",
      "n4": "The outTradeNo is a unique identifier for the Alipay order, stored in the database for reference."
    }
  },
  "ocrll": {
    "sections": {
      "s1": "Order Code Result Listener",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Order Code Result Listener",
    "methodGet": "GET",
    "path": "{Host}/v2/alipayplus/instore/ordercode-listener/:outTradeNo",
    "intro": "This endpoint establishes a real-time connection using Server-Sent Events (SSE) to listen for updates on Alipay+ transactions identified by outTradeNo. It streams transaction status changes, converting timestamps from GMT+8 to Asia/Colombo (GMT+5:30).",
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method",
      "desc": "Provides real-time updates on the transaction status for a specific outTradeNo using SSE."
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The unique identifier Key of the merchant."
    },
    "reqParams": {
      "title": "Request Parameters",
      "intro": "The request includes a path parameter",
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "rowOutTradeNoDesc": "Unique identifier of the Alipay+ transaction.",
        "yes": "Yes"
      },
      "validationTitle": "Request Parameters Validation",
      "ruleOutTradeNo": "Required, must be a non-empty string."
    },
    "sample": {
      "title": "Sample Request",
      "url": "URL",
      "headers": "Headers",
      "exampleUrl": "{Host}/v2/alipayplus/instore/ordercode-listener/abc1234567890"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "ctEventStream": "text/event-stream",
      "body": "Response Body",
      "streams": "Streams events in SSE format.",
      "exampleLead": "Example (as of 01:37 PM +0530, Tuesday, August 05, 2025):",
      "eventUpdate": "event: update",
      "bul1": "event: update - Indicates a transaction update.",
      "bul2": "data: JSON array containing transaction details (id, trade_status, timestamp)."
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "firestore": "1. Firestore Listener Error",
      "server": "2. Unexpected Server Error",
      "status200WithEvent": "200 OK (with error event)",
      "responseBody": "Response Body:"
    },
    "notes": {
      "title": "Notes",
      "n1": "The endpoint uses SSE to maintain a persistent connection, streaming updates from the Alipay+ Instore Transactions.",
      "n2": "Timestamps (gmt_payment) are converted from GMT+8 to Asia/Colombo (GMT+5:30).",
      "n3": "A heartbeat message (:\\n\\n) is sent every 30 seconds to keep the connection alive.",
      "n4": "The connection closes automatically when a transaction update is received or an error occurs, and it cleans up resources on client disconnect."
    }
  },
  "uppw": {
    "sections": {
      "s1": "User Present Pay Waiting",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses",
      "notes": "Notes"
    },
    "title": "User Present Pay Waiting",
    "methodGet": "GET",
    "path": "{Host}/v2/alipayplus/instore/userpresent-waiting",
    "intro": "This endpoint retrieves the status of a user-presented Alipay transaction awaiting authentication, identified by partnerTransId. It allows rechecking to verify if user authentication has occurred, returning the latest transaction details.",
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method",
      "desc": "Fetches the transaction status for a given partnerTransId, useful for rechecking after user authentication."
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The unique identifier Key of the merchant."
    },
    "reqParams": {
      "title": "Request Parameters",
      "intro": "The request includes a path parameter",
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "rowPartnerDesc": "Unique identifier of the partner transaction.",
        "yes": "Yes"
      },
      "validationTitle": "Request Parameters Validation",
      "rulePartner": "Required, must be a non-empty string."
    },
    "sample": {
      "title": "Sample Request",
      "url": "URL",
      "headers": "Headers",
      "exampleUrl": "{Host}/v2/alipayplus/instore/userpresent-waiting/202507310949543232"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "ctJson": "application/json",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "missing": "1. Missing Parameters",
      "notFound": "2. Transaction Not Found",
      "server": "3. Server Error",
      "respBody": "Response Body:"
    },
    "notes": {
      "title": "Notes",
      "n1": "This endpoint queries the Alipay Transactions to retrieve transaction details based on partnerTransId.",
      "n2": "The response includes transactionId, timestamp, currency, amount, outletName, outletId, transactionStatus, and paymentMethod.",
      "n3": "Use this endpoint to recheck the transaction status after initiating a payment via /userpresent-pay, especially when awaiting user authentication.",
      "n4": "The timestamp reflects the time in Asia/Colombo (GMT+5:30).",
      "n5": "If the transaction status is still pending, repeated calls can be made to check for updates after user authentication."
    }
  },
  "instoreInquiry": {
    "sections": {
      "s1": "Instore Payment Inquiry",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Instore Payment Inquiry",
    "methodGet": "GET",
    "path": "{Host}/v2/alipayplus/instore/pay-info",
    "intro": "This endpoint retrieves detailed information about transactions and refunds associated with a specific transactionId (trade_no) for a given merchant, sorting results by timestamp in descending order.",
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method",
      "desc": "Fetches transaction and refund records based on transactionId."
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The merchant API key."
    },
    "req": {
      "title": "Request Parameters",
      "intro": "The request includes a path parameter",
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "yes": "Yes",
        "rowIdDesc": "Unique identifier of the transaction (trade_no)."
      },
      "validationTitle": "Request Parameters Validation",
      "ruleId": "Required, must be a non-empty string."
    },
    "sample": {
      "title": "Sample Request",
      "url": "URL",
      "headers": "Headers",
      "exampleUrl": "{Host}/v2/alipayplus/instore/pay-info/ALIPAY_TX_123456"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "ctJson": "application/json",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "missingId": "1. Missing Transaction ID",
      "notFound": "2. Transaction Not Found",
      "server": "3. Server Error",
      "respBody": "Response Body:"
    }
  },
  "instoreLatest": {
    "sections": {
      "s1": "Instore Not Settled Latest Transactions",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Instore Not Settled Latest Transactions",
    "methodGet": "GET",
    "path": "{Host}/v2/alipayplus/instore/latest-transactions",
    "intro": "This endpoint retrieves the latest unsettled transactions and refunds for a specific merchant, sorting results by timestamp in descending order.",
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method",
      "desc": "Fetches the most recent transactions and refunds with settlementStatus set to false for the authenticated merchant."
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The merchant API key."
    },
    "req": {
      "title": "Request Parameters",
      "validationTitle": "Request Parameters Validation",
      "ruleMerchantId": "Required, provided in headers as merchantid or x-mch-id."
    },
    "sample": {
      "title": "Sample Request",
      "url": "URL",
      "headers": "Headers",
      "exampleUrl": "{Host}/v2/alipayplus/instore/latest-transactions"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "ctJson": "application/json",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "notFound": "1. Transaction Not Found",
      "server": "2. Server Error",
      "respBody": "Response Body:"
    },
    "notes": {
      "title": "Notes"
    }
  },
  "voidTxn": {
    "sections": {
      "s1": "Void Transactions",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Void Transactions",
    "methodPost": "POST",
    "path": "{Host}/v2/alipayplus/instore/void-transaction",
    "intro": "This endpoint allows a merchant to void a successful Alipay transaction on the same Colombo day it was completed, updating the transaction status and notifying relevant parties.",
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method"
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The merchant API key."
    },
    "req": {
      "title": "Request Parameters",
      "desc": "The request body must be in JSON format and include the following parameters",
      "validationTitle": "Request Body Validation",
      "ruleTxnId": "Required, non-empty string.",
      "ruleOutletId": "Required, non-empty string.",
      "ruleMerchantId": "Required, provided in headers as merchantid or x-mch-id.",
      "cols": {
        "param": "Parameter",
        "type": "Type",
        "required": "Required",
        "desc": "Description"
      },
      "rows": {
        "txnIdDesc": "Unique identifier of the transaction to void.",
        "outletIdDesc": "Unique identifier of the outlet associated with the transaction."
      }
    },
    "sample": {
      "title": "Sample Request",
      "headers": "Headers"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "ctJson": "application/json",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "e1": "1. Missing Parameters",
      "e2": "2. Missing Authentication",
      "e3": "3. Outlet Not Found",
      "e4": "4. Outlet No Merchant",
      "e5": "5. Forbidden Outlet",
      "e6": "6. Merchant Not Found",
      "e7": "7. Transaction Not Found",
      "e8": "8. Transaction Outlet Mismatch",
      "e9": "9. Invalid Status",
      "e10": "10. Invalid Transaction Timestamp",
      "e11": "11. Void Window Closed",
      "e12": "12. Alipay Config Missing",
      "e13": "13. Alipay Parse Error",
      "e14": "14. Alipay Void Failed",
      "e15": "15. Void Error",
      "respBody": "Response Body:"
    }
  },
  "merchant_onlinepay_section_title": "Payment Inquiry",
  "merchant_onlinepay_section_endpoint": "Endpoint",
  "merchant_onlinepay_section_headers": "Headers",
  "merchant_onlinepay_section_params": "Request Parameters",
  "merchant_onlinepay_section_sample": "Sample Request",
  "merchant_onlinepay_section_success": "Success Response",
  "merchant_onlinepay_section_errors": "Error Responses",

  "merchant_onlinepay_method": "GET",
  "merchant_onlinepay_intro": "This endpoint retrieves detailed information about payment and refund transactions associated with a specific paymentRequestId for a given merchant, sorting results by timestamp in descending order.",

  "merchant_onlinepay_label_url": "URL",
  "merchant_onlinepay_label_method": "Method",
  "merchant_onlinepay_label_headers": "Headers",
  "merchant_onlinepay_label_status": "Status Code",
  "merchant_onlinepay_label_content_type": "Content Type",
  "merchant_onlinepay_label_response_body": "Response Body",

  "merchant_onlinepay_header_merchant": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
  "merchant_onlinepay_header_auth": "Authorization or x-api-key (string, required): The unique API key of the merchant.",

  "merchant_onlinepay_params_intro": "The request includes a path parameter",
  "merchant_onlinepay_required_yes": "Yes",
  "merchant_onlinepay_param_id_desc": "Unique identifier of the payment request (paymentRequestId).",

  "merchant_onlinepay_tbl_param": "Parameter",
  "merchant_onlinepay_tbl_type": "Type",
  "merchant_onlinepay_tbl_required": "Required",
  "merchant_onlinepay_tbl_desc": "Description",

  "merchant_onlinepay_validation_title": "Request Parameter Validation",
  "merchant_onlinepay_validation_id": "Required, must be a non-empty string (represents paymentRequestId).",

  "merchant_onlinepay_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages",
  "merchant_onlinepay_err_missing_title": "1. Missing Parameters",
  "merchant_onlinepay_err_notfound_title": "2. Transaction Not Found",
  "merchant_onlinepay_err_server_title": "3. Transaction Error",

  "merchant_onlinepay_copy": "Copy",
  "merchant_onlinepay_copied": "Copied!"
  ,
  "merchant_paylink_section_title": "Payment Link Create",
  "merchant_paylink_section_endpoint": "Endpoint",
  "merchant_paylink_section_headers": "Headers",
  "merchant_paylink_section_body": "Request Body",
  "merchant_paylink_section_sample": "Sample Request",
  "merchant_paylink_section_success": "Success Response",
  "merchant_paylink_section_errors": "Error Responses",

  "merchant_paylink_method": "POST",
  "merchant_paylink_intro": "This endpoint initiates an Alipay+ online payment transaction for a given outlet, generating a payment request with a redirect URL for user authorization, tailored for merchant integrations.",

  "merchant_paylink_label_url": "URL",
  "merchant_paylink_label_method": "Method",
  "merchant_paylink_label_desc": "Description",
  "merchant_paylink_desc_text": "Initiates an Alipay+ online payment process, validating outlet and merchant details, and returns a payment URL for user authorization.",
  "merchant_paylink_label_headers": "Headers",
  "merchant_paylink_label_status": "Status Code",
  "merchant_paylink_label_content_type": "Content Type",
  "merchant_paylink_label_response_body": "Response Body",

  "merchant_paylink_header_merchant": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
  "merchant_paylink_header_auth": "Authorization or x-api-key (string, required): The unique API key of the merchant.",

  "merchant_paylink_body_intro": "The request body must be in JSON format and include the following parameters",
  "merchant_paylink_required_yes": "Yes",

  "merchant_paylink_param_outletId_desc": "Unique identifier of the outlet.",
  "merchant_paylink_param_outletId_val": "Must be a non-empty string.",
  "merchant_paylink_param_amount_desc": "Transaction amount.",
  "merchant_paylink_param_amount_val": "Must be a positive number greater than 0.",
  "merchant_paylink_param_order_desc": "Description of the order.",
  "merchant_paylink_param_order_val": "Must be a string, max length 100 characters.",

  "merchant_paylink_tbl_param": "Parameter",
  "merchant_paylink_tbl_type": "Type",
  "merchant_paylink_tbl_required": "Required",
  "merchant_paylink_tbl_desc": "Description",
  "merchant_paylink_tbl_validation": "Validation Rules",

  "merchant_paylink_validation_title": "Request Body Validation",
  "merchant_paylink_val_outletId": "Required, non-empty string.",
  "merchant_paylink_val_amount": "Required, must be a positive number (greater than 0).",
  "merchant_paylink_val_order": "Required, string with a maximum length of 100 characters.",
  "merchant_paylink_val_currency": "Fixed as USD (not user-configurable in this endpoint).",

  "merchant_paylink_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
  "merchant_paylink_err_invalid_input": "Invalid Input",
  "merchant_paylink_err_order_too_long": "Order Description Too Long",
  "merchant_paylink_err_invalid_amount": "Invalid Amount",
  "merchant_paylink_err_outlet_not_found": "Outlet Not Found",
  "merchant_paylink_err_outlet_not_approved": "Outlet Not Approved",
  "merchant_paylink_err_outlet_not_alipay": "Outlet Not Alipay Online Approved",
  "merchant_paylink_err_outlet_missing_merchant": "Outlet Missing Merchant",
  "merchant_paylink_err_merchant_mismatch": "Merchant ID Mismatch",
  "merchant_paylink_err_merchant_not_found": "Merchant Not Found",
  "merchant_paylink_err_config_missing": "Config Missing",
  "merchant_paylink_err_signature_failed": "Signature Failed",
  "merchant_paylink_err_payment_failed": "Payment Failed",

  "merchant_paylink_copy": "Copy",
  "merchant_paylink_copied": "Copied!",
  "paymentRequest": {
    "title": "Payment Request",
    "intro": "This endpoint creates a WebFrame payment request for a merchant, generating a unique payment link with a 24-hour expiry. It automatically includes enabled payment methods (e.g., Alipay+ or cards) based on the outlet's approved status, redirecting users to a payment method selection page.",
    "endpointDesc": "Generates a payment request for a merchant, validating outlet details and persisting the request with available payment methods.",
    "bodyIntro": "The request body must be in JSON format and include the following parameters",
    "params": {
      "outletId": { "desc": "Unique identifier of the outlet.", "val": "Must be a non-empty string." },
      "amount":   { "desc": "Transaction amount.", "val": "Must be a positive number." },
      "currency": { "desc": "Transaction currency.", "val": "Must be either USD or LKR." },
      "subject":  { "desc": "Description of the transaction.", "val": "Must be a string, truncated to 99 chars if >100." }
    },
    "validationTitle": "Request Parameters Validation",
    "validation": {
      "outletId": "Required, non-empty string.",
      "amount": "Required, must be a positive number.",
      "currency": "Required, must be USD or LKR (case-insensitive).",
      "subject": "Required, string with a maximum effective length of 100 characters (truncated to 99 if longer)."
    },
    "errorsIntro": "Below are the possible error responses, including their status codes, error codes, and messages:",
    "errors": {
      "missingField": { "title": "Missing Field" },
      "outletNotFound": { "title": "Outlet Not Found" },
      "outletInactive": { "title": "Outlet Inactive" },
      "merchantMismatch": { "title": "Merchant Mismatch" },
      "noPaymentMethod": { "title": "No Payment Method" },
      "badCurrency": { "title": "Bad Currency" },
      "badAmount": { "title": "Bad Amount" },
      "serverOutlet": { "title": "Server Error (Outlet Check)" },
      "serverCreate": { "title": "Server Error (Create)" }
    }
  },
  "commona": {
    "endpoint": "Endpoint",
    "headers": "Headers",
    "requestBody": "Request Body",
    "sampleRequest": "Sample Request",
    "successResponse": "Success Response",
    "errorResponses": "Error Responses",
    "headerAuth":"Authorization or x-api-key (string, required): The unique identifier Key of the merchant.",
    "headerMerchant":"merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
    "url": "URL",
    "method": "Method",
    "description": "Description",
    "yes": "Yes",
    "tbl": {
      "parameter": "Parameter",
      "type": "Type",
      "required": "Required",
      "description": "Description",
      "validation": "Validation Rules"
    },
    "statusCode": "Status Code",
    "contentType": "Content Type",
    "responseBody": "Response Body",
    "copy": "Copy",
    "copied": "Copied!"
  },
  "cardInquiry": {
    "title": "Payment Inquiry",
    "intro": "This endpoint retrieves or updates the status of a Paycorp transaction identified by clientRef for a given merchant, syncing with Paycorp if the status is not final, and returning detailed transaction information.",
    "paramsIntro": "The request includes a path parameter:",
    "params": {
      "clientRef": { "desc": "Unique client reference identifier of the transaction." }
    },
    "validationTitle": "Request Parameter Validation",
    "validation": {
      "clientRef": "Required, must be a non-empty string."
    },
    "finalStatuses": "For Final Status (SUCCESS, REQUEST_EXPIRED, UNKNOWN)",
    "updatedStatus": "For Updated Status",
    "errorsIntro": "Below are the possible error responses, including their status codes, error codes, and messages",
    "errors": {
      "missingParams": { "title": "Missing Parameters" },
      "notFound": { "title": "Transaction Not Found" },
      "merchantMismatch": { "title": "Merchant ID Mismatch" },
      "txnError": { "title": "Transaction Error" }
    },
    "orSpecificPaycorp": "or specific Paycorp error status"
  },
  "commonq": {
    "endpoint": "Endpoint",
    "headers": "Headers",
    "requestParams": "Request Parameters",
    "requestBody": "Request Body",
    "sampleRequest": "Sample Request",
    "successResponse": "Success Response",
    "errorResponses": "Error Responses",
    "url": "URL",
    "headerAuth":"Authorization or x-api-key (string, required): The unique identifier Key of the merchant.",
    "method": "Method",
   "headerMerchant" :"merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
    "description": "Description",
    "yes": "Yes",
    "tbl": {
      "parameter": "Parameter",
      "type": "Type",
      "required": "Required",
      "description": "Description",
      "validation": "Validation Rules"
    },
    "statusCode": "Status Code",
    "contentType": "Content Type",
    "responseBody": "Response Body",
    "copy": "Copy",
    "copied": "Copied!"
  },
  "commonr": {
    "copy": "Copy",
    "copied": "Copied!",
    "description": "Description",
    "statusCode": "Status Code",
    "yes": "Yes"
  },
  "cardPayLink": {
    "title": "Payment Link Create",
    "methodPost": "POST",
    "path": "{Host}/v2/card-payment/pay",
    "intro": "This endpoint initiates a Paycorp payment transaction for a merchant, generating a payment page URL for user authorization, tailored for merchant integrations.",
    "sections": { "s1": "Payment Link Create", "s2": "Endpoint", "s3": "Request Header", "s4": "Request Body", "s5": "Sample Request", "s6": "Success Response", "s7": "Error Responses" },
    "endpoint": {
      "title": "Endpoint",
      "url": "URL",
      "method": "Method",
      "desc": "Initializes a Paycorp payment process, validating merchant and outlet details, and returns a payment page URL with an expiration time."
    },
    "headers": {
      "title": "Headers",
      "merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
      "auth": "Authorization or x-api-key (string, required): The merchant's API key."
    },
    "req": {
      "title": "Request Body",
      "intro": "The request body must be in JSON format and include the following parameters",
      "validationTitle": "Request Body Validation",
      "rules": {
        "outlet": "Required, non-empty string.",
        "amount": "Required, must be a valid positive number.",
        "currency": "Required, must be LKR or USD; minimum amount is 100 for LKR and 5 for USD.",
        "description": "Required, non-empty string with a maximum length of 100 characters."
      },
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "validation": "Validation Rules",
        "amountDesc": "Transaction amount",
        "amountVal": "Must be a valid positive number.",
        "currencyDesc": "Currency of the transaction.",
        "currencyVal": "Must be either LKR or USD.",
        "outletDesc": "Unique identifier of the outlet.",
        "outletVal": "Must be a non-empty string.",
        "descDesc": "Description of the transaction.",
        "descVal": "Must be a non-empty string up to 100 characters."
      }
    },
    "sample": {
      "title": "Sample Request",
      "headers": "Headers"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "contentType": "Content Type",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
      "respBody": "Response Body:",
      "missing": { "title": "1. Missing Fields" },
      "invalidAmount": { "title": "2. Invalid Amount" },
      "invalidCurrency": { "title": "3. Invalid Currency" },
      "invalidUSD": { "title": "4. Invalid Amount USD" },
      "invalidLKR": { "title": "5. Invalid Amount LKR" },
      "invalidDesc": { "title": "6. Invalid Description" },
      "outletNotFound": { "title": "7. Outlet Not Found" },
      "merchantMismatch": { "title": "8. Merchant ID Mismatch" },
      "merchantNotFound": { "title": "9. Merchant Not Found" },
      "initError": { "title": "10. Payment Init Error" }
    }
  } ,
  "voidTxnAcquirer": {
    "ui": { "copy": "Copy", "copied": "Copied!" },
    "labels": { "statusCode": "Status Code" },
    "sections": {
      "s1": "Void Transactions",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Body",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Void Transactions",
    "methodPost": "POST",
    "path": "{Host}/v2/alipayplus/instore/void-transaction",
    "intro": "Allows an acquirer to void a successful Alipay transaction on the same Colombo date, updating status and notifying relevant parties.",
    "endpoint": { "title": "Endpoint", "url": "URL", "method": "Method" },
    "headers": {
      "title": "Headers",
      "acquirerId": "acquirerid or x-acq-id (string, required): Unique identifier of the acquirer.",
      "authorization": "Authorization (string, required): Authorization key for the acquirer.",
      "authKey": "Auth-Key (string, required): Authentication key for the acquirer.",
      "contentType": "Content-Type (string, required): Must be application/json."
    },
    "voidTxnAcquirer": {
        "ui": { "copy": "Copy", "copied": "Copied!" },
        "labels": { "statusCode": "Status Code" },
    
        "sections": {
          "s1": "Void Transactions",
          "s2": "Endpoint",
          "s3": "Request Header",
          "s4": "Request Body",
          "s5": "Sample Request",
          "s6": "Success Response",
          "s7": "Error Responses"
        },
    
        "title": "Void Transactions",
        "methodPost": "POST",
        "path": "{Host}/v2/alipayplus/instore/void-transaction",
        "intro": "Allows an acquirer to void a successful Alipay transaction on the same Colombo date it was completed. Updates the transaction status and notifies relevant parties.",
    
        "endpoint": {
          "title": "Endpoint",
          "url": "URL",
          "method": "Method"
        },
    
        "headers": {
          "title": "Headers",
          "acquirerId": "acquirerid or x-acq-id (string, required): Unique identifier of the acquirer.",
          "authorization": "Authorization (string, required): Authorization key for the acquirer.",
          "authKey": "Auth-Key (string, required): Authentication key for the acquirer.",
          "contentType": "Content-Type (string, required): Must be application/json."
        },
    
        "req": {
          "title": "Request Body",
          "intro": "The request body must be JSON and include the following fields:",
          "validationTitle": "Request Body Validation",
          "rules": {
            "txnId": "Required, non-empty string.",
            "outletId": "Required, non-empty string.",
            "acquirerId": "Required in headers as acquirerid or x-acq-id."
          },
          "table": {
            "parameter": "Parameter",
            "type": "Type",
            "required": "Required",
            "description": "Description",
            "yes": "Yes",
            "txnIdDesc": "Unique identifier of the transaction to void.",
            "outletIdDesc": "Unique identifier of the outlet associated with the transaction."
          }
        },
    
        "sample": {
          "title": "Sample Request",
          "headers": "Headers"
        },
    
        "success": {
          "title": "Success Response",
          "statusCode": "Status Code",
          "ok": "200 OK",
          "contentType": "Content Type",
          "body": "Response Body"
        },
    
        "errors": {
          "title": "Error Responses",
          "intro": "Below are the possible error responses, including their status codes and messages:",
          "respBody": "Response Body:",
          "missingParams": { "title": "Missing Parameters" },
          "missingAuth": { "title": "Missing Authentication" },
          "acquirerNotFound": { "title": "Acquirer Not Found" },
          "acquirerInactive": { "title": "Acquirer Inactive" },
          "outletNotFound": { "title": "Outlet Not Found" },
          "outletNoMerchant": { "title": "Outlet No Merchant" },
          "outletNoAcquirer": { "title": "Outlet No Acquirer" },
          "acquirerOutletMismatch": { "title": "Acquirer-Outlet Mismatch" },
          "merchantNotFound": { "title": "Merchant Not Found" },
          "txnNotFound": { "title": "Transaction Not Found" },
          "txnOutletMismatch": { "title": "Transaction Outlet Mismatch" },
          "txnAcquirerMismatch": { "title": "Transaction Acquirer Mismatch" },
          "invalidStatus": { "title": "Invalid Status" },
          "invalidTimestamp": { "title": "Invalid Transaction Timestamp" },
          "voidWindow": { "title": "Void Window Closed" },
          "alipayConfig": { "title": "Alipay Config Missing" },
          "alipayParse": { "title": "Alipay Parse Error" },
          "alipayVoidFail": { "title": "Alipay Void Failed" },
          "voidError": { "title": "Void Error" }
        }
      },
    "req": {
      "title": "Request Body",
      "intro": "The request body must be JSON and include:",
      "validationTitle": "Request Body Validation",
      "rules": {
        "txnId": "Required, non-empty string.",
        "outletId": "Required, non-empty string.",
        "acquirerId": "Required in headers as acquirerid or x-acq-id."
      },
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "yes": "Yes",
        "txnIdDesc": "Unique identifier of the transaction to void.",
        "outletIdDesc": "Unique identifier of the outlet associated with the transaction."
      }
    },
    "sample": { "title": "Sample Request", "headers": "Headers" },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Possible error responses:",
      "respBody": "Response Body:",
      "missingParams": { "title": "Missing Parameters" },
      "missingAuth": { "title": "Missing Authentication" },
      "acquirerNotFound": { "title": "Acquirer Not Found" },
      "acquirerInactive": { "title": "Acquirer Inactive" },
      "outletNotFound": { "title": "Outlet Not Found" },
      "outletNoMerchant": { "title": "Outlet No Merchant" },
      "outletNoAcquirer": { "title": "Outlet No Acquirer" },
      "acquirerOutletMismatch": { "title": "Acquirer-Outlet Mismatch" },
      "merchantNotFound": { "title": "Merchant Not Found" },
      "txnNotFound": { "title": "Transaction Not Found" },
      "txnOutletMismatch": { "title": "Transaction Outlet Mismatch" },
      "txnAcquirerMismatch": { "title": "Transaction Acquirer Mismatch" },
      "invalidStatus": { "title": "Invalid Status" },
      "invalidTimestamp": { "title": "Invalid Transaction Timestamp" },
      "voidWindow": { "title": "Void Window Closed" },
      "alipayConfig": { "title": "Alipay Config Missing" },
      "alipayParse": { "title": "Alipay Parse Error" },
      "alipayVoidFail": { "title": "Alipay Void Failed" },
      "voidError": { "title": "Void Error" }
    }
  },
  "instoreInquiryAcq": {
    "ui": { "copy": "Copy", "copied": "Copied!" },
    "labels": { "statusCode": "Status Code" },
    "sections": {
      "s1": "Inâstore Payment Inquiry",
      "s2": "Endpoint",
      "s3": "Request Header",
      "s4": "Request Parameters",
      "s5": "Sample Request",
      "s6": "Success Response",
      "s7": "Error Responses"
    },
    "title": "Inâstore Payment Inquiry",
    "methodGet": "GET",
    "path": "{Host}/v2/alipayplus/instore/pay-info/:transactionId",
    "intro": "Retrieves detailed info about transactions and refunds for a given transactionId (trade_no), sorted by timestamp (DESC).",
    "endpoint": { "title": "Endpoint", "url": "URL", "method": "Method" },
    "headers": {
      "title": "Headers",
      "acquirerId": "acquirerid or x-acq-id (string, required): Unique identifier of the acquirer.",
      "authorization": "Authorization (string, required): Authorization key for the acquirer.",
      "authKey": "Auth-Key (string, required): Authentication key for the acquirer.",
      "contentType": "Content-Type (string, required): Must be application/json."
    },
    "req": {
      "title": "Request Parameters",
      "intro": "The request includes a path parameter.",
      "validationTitle": "Request Parameters Validation",
      "rules": { "txnId": "Required, must be a non-empty string." },
      "table": {
        "parameter": "Parameter",
        "type": "Type",
        "required": "Required",
        "description": "Description",
        "yes": "Yes",
        "txnIdDesc": "Unique identifier of the transaction (trade_no)."
      }
    },
    "sample": {
      "title": "Sample Request",
      "url": "URL",
      "exampleUrl": "{Host}/v2/alipayplus/instore/pay-info/ALIPAY_TX_123456",
      "headers": "Headers"
    },
    "success": {
      "title": "Success Response",
      "statusCode": "Status Code",
      "ok": "200 OK",
      "contentType": "Content Type",
      "body": "Response Body"
    },
    "errors": {
      "title": "Error Responses",
      "intro": "Below are possible error responses, including status codes and messages:",
      "respBody": "Response Body:",
      "missingId": { "title": "Missing Transaction ID" },
      "notFound": { "title": "Transaction Not Found" },
      "server": { "title": "Server Error" }
    }
  },
  "payment_link_create_title": "Payment Link Create",
  "payment_link_create_intro": "This endpoint initiates an Alipay+ online payment transaction for a given outlet, generating a payment request with a redirect URL for user authorization, tailored for acquirer integrations.",

  "payment_link_create_http_post": "POST",
  "payment_link_create_endpoint_path": "{Host}/v2/alipayplus/online/pay",

  "payment_link_create_section_endpoint": "Endpoint",
  "payment_link_create_section_headers": "Headers",
  "payment_link_create_section_request_body": "Request Body",
  "payment_link_create_section_sample_request": "Sample Request",
  "payment_link_create_section_success_response": "Success Response",
  "payment_link_create_section_error_responses": "Error Responses",

  "payment_link_create_header_acquirerid": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
  "payment_link_create_header_authorization": "Authorization (string, required): The authorization key for the acquirer.",
  "payment_link_create_header_authkey": "Auth-Key (string, required): The authentication key for the acquirer.",
  "payment_link_create_header_content_type": "Content-Type (string, required): Must be application/json.",

  "payment_link_create_request_body_intro": "The request body must be in JSON format and include the following parameters:",
  "payment_link_create_table_parameter": "Parameter",
  "payment_link_create_table_type": "Type",
  "payment_link_create_table_required": "Required",
  "payment_link_create_table_description": "Description",
  "payment_link_create_table_validation_rules": "Validation Rules",

  "payment_link_create_field_outletId_desc": "Unique identifier of the outlet.",
  "payment_link_create_field_outletId_validation": "Must be a non-empty string.",

  "payment_link_create_field_amount_desc": "Transaction amount.",
  "payment_link_create_field_amount_validation": "Must be a positive number greater than 0.",

  "payment_link_create_field_orderDescription_desc": "Description of the order.",
  "payment_link_create_field_orderDescription_validation": "Must be a string, max length 100 characters.",

  "payment_link_create_validation_outletId": "Required, non-empty string.",
  "payment_link_create_validation_amount": "Required, must be a positive number (greater than 0).",
  "payment_link_create_validation_orderDescription": "Required, string with a maximum length of 100 characters.",
  "payment_link_create_validation_currency": "Fixed as USD (not user-configurable in this endpoint).",

  "payment_link_create_sample_headers": "Headers",

  "payment_link_create_label_status_code": "Status Code",
  "payment_link_create_label_content_type": "Content Type",
  "payment_link_create_label_response_body": "Response Body",

  "payment_link_create_error_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
  "payment_link_create_error_invalid_input": "Invalid Input",
  "payment_link_create_error_order_desc_too_long": "Order Description Too Long",
  "payment_link_create_error_invalid_amount": "Invalid Amount",
  "payment_link_create_error_outlet_not_found": "Outlet Not Found",
  "payment_link_create_error_outlet_not_approved": "Outlet Not Approved",
  "payment_link_create_error_outlet_not_alipay_online_approved": "Outlet Not Alipay Online Approved",
  "payment_link_create_error_outlet_missing_merchant": "Outlet Missing Merchant",
  "payment_link_create_error_acquirer_outlet_mismatch": "Acquirer-Outlet Mismatch",
  "payment_link_create_error_merchant_not_found": "Merchant Not Found",
  "payment_link_create_error_config_missing": "Config Missing",
  "payment_link_create_error_signature_failed": "Signature Failed",
  "payment_link_create_error_payment_failed": "Payment Failed",

  "payment_link_create_ui_copy": "Copy",
  "payment_link_create_ui_copied": "Copied!",

  "online_payment_inquiry_title": "Payment Inquiry",
  "online_payment_inquiry_intro": "This endpoint retrieves detailed information about payment and refund transactions associated with a specific paymentRequestId for a given acquirer, sorting results by timestamp in descending order.",

  "online_payment_inquiry_http_get": "GET",
  "online_payment_inquiry_endpoint_path": "{Host}/v2/alipayplus/online/pay-info/:id",

  "online_payment_inquiry_section_title": "Payment Inquiry",
  "online_payment_inquiry_section_endpoint": "Endpoint",
  "online_payment_inquiry_section_headers": "Headers",
  "online_payment_inquiry_section_params": "Request Parameters",
  "online_payment_inquiry_section_sample_request": "Sample Request",
  "online_payment_inquiry_section_success_response": "Success Response",
  "online_payment_inquiry_section_error_responses": "Error Responses",

  "online_payment_inquiry_label_url": "URL",
  "online_payment_inquiry_label_method": "Method",
  "online_payment_inquiry_label_description": "Description",
  "online_payment_inquiry_label_status_code": "Status Code",
  "online_payment_inquiry_label_content_type": "Content Type",
  "online_payment_inquiry_label_response_body": "Response Body",

  "online_payment_inquiry_endpoint_desc": "Fetches payment and refund records from the AlipayPlus-Transactions and AlipayPlus-Refund-Transactions collections based on paymentRequestId, tailored for acquirer integrations.",

  "online_payment_inquiry_header_acquirerid": "acquirerid or x-acq-id (string, required): The unique identifier of the acquirer.",
  "online_payment_inquiry_header_authorization": "Authorization (string, required): The authorization key for the acquirer.",
  "online_payment_inquiry_header_authkey": "Auth-Key (string, required): The authentication key for the acquirer.",
  "online_payment_inquiry_header_content_type": "Content-Type (string, required): Must be application/json.",

  "online_payment_inquiry_params_intro": "The request includes a path parameter",
  "online_payment_inquiry_table_parameter": "Parameter",
  "online_payment_inquiry_table_type": "Type",
  "online_payment_inquiry_table_required": "Required",
  "online_payment_inquiry_table_description": "Description",
  "online_payment_inquiry_type_string": "string",
  "online_payment_inquiry_common_yes": "Yes",
  "online_payment_inquiry_param_id_desc": "Unique identifier of the payment request (paymentRequestId).",

  "online_payment_inquiry_validation_title": "Request Parameter Validation",
  "online_payment_inquiry_validation_id": "Required, must be a non-empty string (represents paymentRequestId).",

  "online_payment_inquiry_sample_url": "{Host}/v2/alipayplus/online/pay-info/PAY_1234567890abcdef",
  "online_payment_inquiry_sample_headers": "Headers",

  "online_payment_inquiry_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages",
  "online_payment_inquiry_error_missing_params": "Missing Parameters",
  "online_payment_inquiry_error_tx_not_found": "Transaction Not Found",
  "online_payment_inquiry_error_tx_error": "Transaction Error",

  "online_payment_inquiry_ui_copy": "Copy",
  "online_payment_inquiry_ui_copied": "Copied!",
  "merchant_user_present_pay_title": "User Present Pay",
  "merchant_user_present_pay_intro": "This endpoint initiates an Alipay overseas spot payment transaction for user-presented scenarios, validating merchant, outlet, and terminal details, and generating a transaction request.",

  "merchant_user_present_pay_http_post": "POST",
  "merchant_user_present_pay_endpoint_path": "{Host}/v2/alipayplus/instore/userpresent-pay",

  "merchant_user_present_pay_section_title": "User Present Pay",
  "merchant_user_present_pay_section_endpoint": "Endpoint",
  "merchant_user_present_pay_section_headers": " Headers",
  "merchant_user_present_pay_section_request_body": "Request Body",
  "merchant_user_present_pay_section_sample_request": "Sample Request",
  "merchant_user_present_pay_section_success_response": "Success Response",
  "merchant_user_present_pay_section_error_responses": "Error Responses",
  "merchant_user_present_pay_section_notes": "Notes",

  "merchant_user_present_pay_label_url": "URL",
  "merchant_user_present_pay_label_method": "Method",
  "merchant_user_present_pay_label_description": "Description",
  "merchant_user_present_pay_label_status_code": "Status Code",
  "merchant_user_present_pay_label_content_type": "Content Type",
  "merchant_user_present_pay_label_response_body": "Response Body",

  "merchant_user_present_pay_endpoint_desc": "Initiates a user-presented Alipay+ transaction by validating inputs and interacting with the Alipay+ API.",

  "merchant_user_present_pay_header_merchantId": "merchantId or x-mch-id (string, required): The unique identifier of the merchant.",
  "merchant_user_present_pay_header_authorization": "Authorization or x-api-key (string, required): The unique identifier Key of the merchant.",

  "merchant_user_present_pay_request_body_intro": "The request body must be in JSON format and include the following parameters",
  "merchant_user_present_pay_table_parameter": "Parameter",
  "merchant_user_present_pay_table_type": "Type",
  "merchant_user_present_pay_table_required": "Required",
  "merchant_user_present_pay_table_description": "Description",
  "merchant_user_present_pay_table_validation": "Validation Rules",

  "merchant_user_present_pay_type_string": "string",
  "merchant_user_present_pay_type_number": "number",
  "merchant_user_present_pay_common_yes": "Yes",

  "merchant_user_present_pay_field_outletId_desc": "Unique identifier of the outlet.",
  "merchant_user_present_pay_field_outletId_validation": "Must be a non-empty string.",
  "merchant_user_present_pay_field_amount_desc": "Transaction amount.",
  "merchant_user_present_pay_field_amount_validation": "Must be a positive number greater than 0.",
  "merchant_user_present_pay_field_subject_desc": "Description of the transaction.",
  "merchant_user_present_pay_field_subject_validation": "Must be a string with a maximum length of 100 characters.",
  "merchant_user_present_pay_field_currency_desc": "Currency of the transaction.",
  "merchant_user_present_pay_field_currency_validation": "Must be either USD or LKR.",
  "merchant_user_present_pay_field_terminalId_desc": "Unique identifier of the terminal.",
  "merchant_user_present_pay_field_terminalId_validation": "Must be a non-empty string.",
  "merchant_user_present_pay_field_buyer_identity_code_desc": "Buyerâs identity code (e.g., barcode).",
  "merchant_user_present_pay_field_buyer_identity_code_validation": "Must be a non-empty string.",

  "merchant_user_present_pay_validation_title": "Request Body Validation",
  "merchant_user_present_pay_validation_outletId": "Required, non-empty string.",
  "merchant_user_present_pay_validation_amount": "Required, must be a positive number (greater than 0).",
  "merchant_user_present_pay_validation_subject": "Required, string with a maximum length of 100 characters.",
  "merchant_user_present_pay_validation_currency": "Required, must be one of USD or LKR.",
  "merchant_user_present_pay_validation_terminalId": "Required, non-empty string.",
  "merchant_user_present_pay_validation_buyer_identity_code": "Required, non-empty string.",

  "merchant_user_present_pay_sample_headers": "Headers",

  "merchant_user_present_pay_status_success": "Success",
  "merchant_user_present_pay_status_pending": "Pending Authentication",

  "merchant_user_present_pay_errors_intro": "Below are the possible error responses, including their status codes, error codes, and messages:",
  "merchant_user_present_pay_error_missing_params": "Missing Parameters",
  "merchant_user_present_pay_error_invalid_subject": "Invalid Subject",
  "merchant_user_present_pay_error_invalid_currency": "Invalid Currency",
  "merchant_user_present_pay_error_invalid_amount": "Invalid Amount",
  "merchant_user_present_pay_error_outlet_not_found": "Outlet Not Found",
  "merchant_user_present_pay_error_merchant_outlet_mismatch": "Merchant-Outlet Mismatch",
  "merchant_user_present_pay_error_terminal_not_approved": "Terminal Not Approved or Not Found",
  "merchant_user_present_pay_error_merchant_not_found": "Merchant Not Found",
  "merchant_user_present_pay_error_alipay_invalid_response": "Alipay+ Invalid Response",
  "merchant_user_present_pay_error_alipay_tx_failed": "Alipay+ Transaction Failed",
  "merchant_user_present_pay_error_server_error": "Server Error",

  "merchant_user_present_pay_note_spot_pay": "The endpoint triggers an acquire.overseas.spot.pay transaction for user-presented payments.",
  "merchant_user_present_pay_note_tz": "Timestamps are in Asia/Colombo (GMT+5:30).",
  "merchant_user_present_pay_note_orderId": "orderId is generated from current date-time plus a random number.",
  "merchant_user_present_pay_note_buyer_code": "buyer_identity_code should be a barcode or similar identifier for the buyer.",
  "merchant_user_present_pay_note_statuses": "Transaction status may be PENDING while awaiting user authentication, or SUCCESS after initiation.",

  "merchant_user_present_pay_ui_copy": "Copy",
  "merchant_user_present_pay_ui_copied": "Copied!",
  

  "sidebar_expand": "Expand sidebar",
  "sidebar_collapse": "Collapse sidebar",

  "sidebar_back_to_home": "Back To Home",
  "sidebar_group_acquirer": "Acquirer",

  "sidebar_introduction": "Introduction",
  "sidebar_getting_started": "Getting Started",

  "sidebar_features": "Features and Functionalities",

  "sidebar_merchant_registration": "Merchant Registration",
  "sidebar_registration_workflow": "Registration Workflow",
  "sidebar_bulk_registration": "Bulk Registration",
  "sidebar_self_registration": "Self Registration",

  "sidebar_merchant_management": "Merchant Management",
  "sidebar_suspending_merchant": "Suspending Merchant",
  "sidebar_activating_merchant": "Activating Merchant",
  "sidebar_uploading_agreement": "Uploading Agreement",

  "sidebar_store_management": "Merchant Store Management",
  "sidebar_view_all_stores": "View All Stores",
  "sidebar_create_new_store": "Creating a New Store",
  "sidebar_assign_store_users": "Assigning Store Users",
  "sidebar_terminal_management": "Terminal Management",

  "sidebar_troubleshooting": "Troubleshooting",
  "sidebar_faq": "Frequently Asked Questions",
  "sidebar_support_information": "Support Information",



  "merchant_sidebar_expand": "Expand sidebar",
  "merchant_sidebar_collapse": "Collapse sidebar",

  "merchant_sidebar_back_to_home": "Back To Home",
  "merchant_sidebar_group_merchant": "Merchant",

  "merchant_sidebar_introduction": "Introduction",
  "merchant_sidebar_getting_started": "Getting Started",
  "merchant_sidebar_categories": "Merchant Categories",

  "merchant_sidebar_features": "Features and Functionalities",

  "merchant_sidebar_merchant_registration": "Merchant Registration",

  "merchant_sidebar_store_management": "Merchant Store Management",
  "merchant_sidebar_view_all_stores": "View All Stores",
  "merchant_sidebar_single_store_creation": "Single Store Creation",
  "merchant_sidebar_multiple_store_creation": "Multiple Store Creation",
  "merchant_sidebar_assign_store_users": "Assigning Store Users",
  "merchant_sidebar_terminal_management": "Terminal Management",

  "merchant_sidebar_merchant_transactions": "Merchant Transactions",
  "merchant_sidebar_alipay_instore": "Alipay+Instore",
  "merchant_sidebar_alipay_online": "Alipay+Online",
  "merchant_sidebar_card_payments": "Card Payments",

  "merchant_sidebar_transaction_reports": "Transaction Reports",
  "merchant_sidebar_reports_alipay_instore": "Alipay+Instore",
  "merchant_sidebar_reports_alipay_online": "Alipay+Online",
  "merchant_sidebar_reports_card_payments": "Card Payments",

  "merchant_sidebar_troubleshooting": "Troubleshooting",
  "merchant_sidebar_faq": "Frequently Asked Questions",
  "merchant_sidebar_support_information": "Support Information",



  "developer_sidebar_expand": "Expand sidebar",
  "developer_sidebar_collapse": "Collapse sidebar",

  "developer_sidebar_back_to_home": "Back To Home",
  "developer_sidebar_group_developer": "Developer",

  "developer_sidebar_getting_started": "Getting Started",

  "developer_sidebar_system_overview": "System Overview",
  "developer_sidebar_introduction": "Introduction",
  "developer_sidebar_system_architecture": "System Architecture",
  "developer_sidebar_web_application_architecture": "Web App Architecture",
  "developer_sidebar_mobile_application_architecture": "Mobile App Architecture",
  "developer_sidebar_backend_architecture": "Backend Architecture",
  "developer_sidebar_database_architecture": "Database Architecture",
  "developer_sidebar_authentication_and_authorization": "Authentication & Authorization",
  "developer_sidebar_encryption_and_security": "Encryption & Security",
  "developer_sidebar_api_security": "API Security",
  "developer_sidebar_deployment_and_infrastructure": "Deployment & Infrastructure",
  "developer_sidebar_third_party_integration": "Third Party Integration",
  "developer_sidebar_compliance_and_privacy": "Compliance & Privacy",
  "developer_sidebar_maintenance_and_support": "Maintenance & Support",

  "developer_sidebar_acquirer_apis": "Acquirer APIs",
  "developer_sidebar_overview": "Overview",
  "developer_sidebar_endpoints": "Endpoints",
  "developer_sidebar_alipay_instore_apis": "Alipay+ Instore APIs",
  "developer_sidebar_order_code_pay_qr": "Order Code Pay QR",
  "developer_sidebar_order_code_result_listener": "Order Code Result Listener",
  "developer_sidebar_user_present_pay": "User Present Pay",
  "developer_sidebar_user_present_pay_waiting": "User Present Pay Waiting",
  "developer_sidebar_void_transaction": "Void Transaction",
  "developer_sidebar_instore_payment_inquiry": "Instore Payment Inquiry",
  "developer_sidebar_alipay_online_apis": "Alipay+ Online APIs",
  "developer_sidebar_payment_link_create": "Payment Link Create",
  "developer_sidebar_payment_inquiry": "Payment Inquiry",

  "developer_sidebar_merchant_apis": "Merchant APIs",
  "developer_sidebar_instore_not_settled_latest_transactions": "Instore Not Settled Latest Transactions",
  "developer_sidebar_web_frame_online_apis": "Web Frame Online APIs",
  "developer_sidebar_payment_request": "Payment Request",
  "developer_sidebar_card_payments_apis": "Card Payments APIs"
  
}